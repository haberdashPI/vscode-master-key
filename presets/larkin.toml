[header]
version = "1.0"

# NOTE: currently this field has no functional effect, it merely serves as documentation.
# However, future version of Master Key may leverage the required extensions in some way to
# make them easy to install when they are missing
requiredExtensions = [
      "dbankier.vscode-quick-select",
      "haberdashPI.vscode-select-by-indent",
      "haberdashPI.selection-utilities",
      "haberdashPI.move-cursor-by-argument",
      "pustelto.bracketeer",
      "wmaurer.change-case",
      "pranshuagrawal.toggle-case",
      "albymor.increment-selection",
      "pkief.markdown-checkbox",
      "edgardmessias.clipboard-manager",
      "stkb.rewrap",
      "haberdashPI.terminal-polyglot",
      "jack89ita.open-file-from-path",
      "koalamer.labeled-bookmarks",
]

name = "Larkin Key Bindings"
description = """
This set of keybindings provides a comprehensive and well tested set of
bindings that I use in my daily work. It serves as an example of a fully
customized set of keybindings, and demonstrates the full capabilities of
master-key.

The basic logic of these commands are inspired by kakoune: motions generally
cause some region of text to be selected, and then actions modify these
selections. This is the inverse of vim's motions (`wd` instead of `dw`) and
integrates well with many of the existing VSCode extensions which operate on
selections or add commands to select regions of text.

These bindings are named after the middle name of my first child (Larkin).
"""

[define]
validModes = ["insert", "capture", "normal", "syminsert", "selectedit"]
select_on = false
around_on = false

kinds = [
    { name = "motions",   description = "These commands move the cursor and/or selections." },
    { name = "action",   description = "Actions do something with the selected text (e.g. delete it). Unless otherwise noted, in the absence of a selection, an action will modify an entire line, and a count argument indicates the number of lines (e.g. 3d deletes this line and the next 3 lines)." },
    { name = "util",     description = "Assorted other commands that aren't motions or actions" },
]

[[define.selectLinesDown]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesDown]]
if = "count"
command = "cursorMove"
args = { to = "down", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[define.selectLinesDown]]
command = "expandLineSelection"

[[define.selectLinesUp]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesUp]]
if = "count"
command = "cursorMove"
args = { to = "up", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[define.selectLinesUp]]
command = "expandLineSelection"


[[path]]
id = "modes"
name = "Modes"
description = """
Larkin uses different modes (like vim). Insert is the default and it
works the same way VSCode normally does. Upon hitting escape you enter normal
mode, wherein a variety of behaviors are available to move around and manipulate the
text.

Refer to the actions section for the various ways you can exit normal mode and
return to insert mode.

**TODO**: document the other modes
"""
default.kind = "util"

[[bind]]
path = "modes"
name = "normal"
description = "Enter normal mode"
key = ["escape", "ctrl+["]
mode = []
hideInPalette = true
command = "master-key.enterNormal"
when = "!findWidgetVisible"
prefixes = "<all-prefixes>"

[[bind]]
path = "modes"
name = "normal"
key = ["escape", "ctrl+["]
hideInPalette = true
when = "suggsetWidgetVisible && editorTextFocus && !findWidgetVisible"
command = "master-key.enterNormal"
mode = []
prefixes = "<all-prefixes>"

[[bind]]
path = "modes"
# by default typing keys in a mode other than insert (or capture) is simply ignored
name = "ignore"
description = "this key does nothing"
key = ["<all-keys>", "shift+<all-keys>"]
command = "master-key.ignore"
prefixes = "<all-prefixes>"
mode = ["!insert", "!capture"]
when = "editorTextFocus"

[[path]]
id = "edit"
name = "Editor Commands"
description = """
Most commands are editing commands, they interact with the text editor, either by
selecting text in the editor, moving around it, manipulating text in the editor, and
so forth. There must be an active editor for these commands to work.
"""
when = "editorTextFocus && !findWidgetVisible"
default.mode = "normal"

[[path]]
id = "edit.count"
name = "count"
description = """
The number keys are used to update the count, which affects how many times the next
command is repeated, when relevant.
"""
default.kind = "count"

[[bind]]
path = "edit.count"
# likewise, the numbers affect command count in all modes where text isn't
# being entered
name = "count {key}"
key = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
command = "master-key.updateCount"
description = "Add digit {key} to the count argument of a command"
combinedKey = "0-9"
combinedName = "count 0-9"
combinedDescription = "Add digit 1-9 to count argument of a command"
args.value = "{key}"
resetTransient = false
mode = ["!insert", "!capture"]

## Basic motions
## --------------------------------

[[path]]
id = "edit.motion"
name = "Motions"
description = "Commands that move the cursors and/or selections"
default.kind = "motion"

[[path]]
id = "edit.motion.prim"
name = "Primitive Motions"
description = "Motions fundamental to moving around in the editor."
default.command = "cursorMove"
default.computedArgs.value = "count"
default.computedArgs.select = "editorHasSelection || select_on"

[[bind]]
path = "edit.motion.prim"
key = "h"
name = "←"
combinedName = "←/→"
combinedKey = "h/l"
combinedDescription = "move left/right"
description = "move left"
args.to = "left"
mode = "normal"

[[bind]]
path = "edit.motion.prim"
key = "l"
name = "→"
description = "move right"
args.to = "right"

[[bind]]
path = "edit.motion.prim"
key = "j"
name = "↓"
combinedName = "↓/↑"
combinedKey = "j/k"
combinedDescription = "move down/up"
description = "move down"
args.to = "down"
args.by = "wrappedLine"

[[bind]]
path = "edit.motion.prim"
key = "k"
name = "↑"
description = "move up"
combinedName = "↓/↑"
args.to = "up"
args.by = "wrappedLine"

[[bind]]
path = "edit.motion.prim"
key = "shift+h"
name = "start"
description = "start of line (alternates between first non-white and first)"
combinedName = "start/end"
combinedKey = "shift+h/shift+l"
combinedDescription = "move to start/end of line"
command = "cursorHomeSelect"

[[bind]] # we don't use prim because we don't want the defaults
path = "edit.motion"
key = "shift+l"
name = "end"
combinedName = "shift+h/shift+l"
description = "end of line"
command = "cursorMove"
args.to = "wrappedLineEnd"
args.select = true

[[bind]]
path = "edit.motion.prim"
key = "shift+k"
name = "sel ↑"
combinedName = "sel ↑/↓"
combinedDescription = "select lines up/down"
combinedKey = "shift+k/shift+j"
description = "select lines upwards"
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "up", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[bind.args.commands]]
command = "expandLineSelection"

[[bind]]
path = "edit.motion.prim"
key = "shift+j"
name = "sel ↓"
combinedName = "sel ↑/↓"
description = "select lines downwards"
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "down", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[bind.args.commands]]
command = "expandLineSelection"

[[bind]]
path = "edit.motion.prim"
key = "shift+x"
name = "exapand"
description = "expand selections to full lines"
command = "expandLineSelection"

[[path]]
id = "edit.motion.obj"
name = "Motions defined by various regex and syntactical objects"
description = """
motions that move by a predefined syntactic object (e.g. word, paragraph, etc...)
"""
default.command = "selection-utilities.moveBy"
default.args.boundary = "start"
default.args.select = true

[[bind]]
path = "edit.motion.obj"
key = "w"
name = "subwrd →"
description = "next subword (camel/snake case)"
combinedName = "subwrd ←/→"
combinedDescription = "next/prev subword (camel/snake case)"
combinedKey = "w/b"
args.unit = "subword"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "b"
name = "subwrd ←"
description = "previous subword (camel/snake case)"
combinedName = "subwrd ←/→"
args.unit = "subword"
computedArgs.value = "-count || -1"

[[bind]]
path = "edit.motion.obj"
key = "shift+w"
name = "word →"
description = "next word"
combinedName = "word ←/→"
combinedDescription = "next/prev word"
combinedKey = "shift+w/b"
args.unit = "word"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "shift+b"
name = "word ←"
combinedName = "word ←/→"
description = "previous word"
prefixes = [""]
args.unit = "word"
computedArgs.value = "-count || -1"

[[bind]]
path = "edit.motion.obj"
key = "e"
name = "subwrd end"
description = "next subword (camel/snake case) end"
args.unit = "subword"
args.boundary = "end"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "shift+e"
name = "word end"
description = "next word end"
args.unit = "word"
args.boundary = "end"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "shift+]"
name = "parag. →"
description = "next paragraph"
combinedName = "paragraph →/←"
combinedDescription = "next/previous paragraph"
combinedKey = "shift+]/["
args.unit = "paragraph"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "shift+["
name = "parag. ←"
combinedName = "paragraph →/←"
description = "previous paragraph"
args.unit = "paragraph"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.obj"
key = "shift+0"
name = "subsec →"
description = "next subsection"
combinedName = "subsec →/←"
combinedDescription = "next/previous subsection"
combinedKey = "shift+0/9"
args.unit = "subsection"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "shift+9"
name = "subsec ←"
description = "previous subsection"
combinedName = "subsec →/←"
args.unit = "subsection"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.prim"
key = "v"
name = "shrink selection"
combinedName = "shrink/hold selection"
combinedDescription = """
reduce selections to zero length / make all commands extend the selection
"""
description = """
reduce all selections to length zero
"""
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      { command = "master-key.setFlag", args = { name = "select_on", value = false } },
]

[[bind]]
path = "edit.motion.mod"
key = "shift+v"
name = "hold selection"
description = """
all motions extend the selection
"""
command = "master-key.setFlag"
args.name = "select_on"
args.value = true

[[bind]]
path = "edit.action.open_lines"
name = "open, act →"
description = "without selection: open a line below current line and enter insert, with seleciton: move cursort to start"
key = "o"
when = "!editorHasSelection"
command = "runCommands"
args.commands = ["editor.action.insertLineAfter", "master-key.enterInsert"]

[[bind]]
path = "edit.action.open_lines"
key = "o"
when = "editorHasSelection"
command = "selection-utilities.activeAtEnd"

[[bind]]
path = "edit.action.open_lines"
name = "open blw, act ←"
description = "without selection: open a line above current line and enter insert, with selection: move cursor to end"
key = "shift+o"
when = "!editorHasSelection"
command = "runCommands"
args.commands = [ "editor.action.insertLineBefore", "master-key.enterInsert" ]

[[bind]]
path = "edit.action.open_lines"
name = "open blw, act ←"
description = "without selection: open a line above current line and enter insert, with selection: move cursor to end"
key = "shift+o"
when = "editorHasSelection"
command = "selection-utilities.activeAtStart"

[[bind]]
path = "edit.motion"
key = "shift+5"
name = "to bracket"
description = "Move to matching bracket"
command = "editor.action.jumpToBracket"

## Repeating Motions
## --------------------------------

[[path]]
id = "edit.motion.history"
name = "motion history"
description = "Commands that repeat some kind of motion"

[[bind]]
path = "edit.motion.history"
key = ";"
name = "repeat motion"
description = """
Repeat the last motion command. Motions usually move the cursor or change the selection.
"""
repeat = "count"
command = "master-key.replayFromHistory"
args.at = "commandHistory[i].path.startsWith('edit.motion') && commandHistory[i].name != 'repeat motion'"

[[bind]]
path = "edit.motion.history"
name = "repeat subject"
description = """
Repeat the subject: a motion command that occurred right before an action. For
instance `w` followed by `d` selects a word and deletes it. The `w` command would be the
last subject until some new action is run after `d`.
"""
key = ","
command = "master-key.replayFromHistory"
args.at = """
commandHistory[i].path.startsWith("edit.motion") &&
commandHistory[i+1].path.startsWith("edit.action") &&
!(commandHistory[i+1].name.startsWith("repeat ") &&
  commandHistory[i+1].path.startsWith("edit.action.history"))
"""

[[bind]]
path = "edit.motion.history"
name = "cursor undo"
key = "-"
combinedName = "cursor undo/redo"
combinedKey = "-/shift+-"
command = "cursorUndo"

[[bind]]
path = "edit.motion.history"
name = "cursor redo"
combinedName = "cursor undo/redo"
key = "shift+-"
command = "cursorRedo"

[[bind]]
path = "edit.motion.history"
name = "nav ←"
description = "Go back in navigation history (e.g. goto definition)"
combinedName = "nav ←/→"
combinedKey = "n/shift+n"
combinedDescription = "Go back/forward in navigation history"
key = "g n"
command = "workbench.action.navigateBackInNavigationLocations"

[[bind]]
path = "edit.motion.history"
name = "nav →"
combinedName = "nav ←/→"
description = "Go forward in navigation history (e.g. goto definition)"
key = "g shift+n"
command = "workbench.action.navigateForwardInNavigationLocations"

[[bind]]
path = "edit.motion.history"
name = "edit hist ←"
description = "Go back in edit history"
key = "g -"
combinedName = "edit ←/→"
combinedKey = "-/shift+-"
combinedDescription = "Go back/forward in edit history"
command = "workbench.action.navigateBackInEditLocations"

[[bind]]
path = "edit.motion.history"
name = "edit hist →"
description = "Go forward in edit history)"
key = "g shift+-"
combinedName = "edit ←/→"
command = "workbench.action.navigateForwardInEditLocations"

## Search Motions
## --------------------------------

[[path]]
id = "edit.motion.search"
name = "Search Related Motions"
description = "Motions related to searching for text in a document"
default.command = "master-key.search"
default.args.caseSensitive = false
default.args.backwards = false
default.args.selectTillMatch = true
default.args.wrapAround = true

[[bind]]
path = "edit.motion.search"
key = "/"
name = "search →"
description = "search forwards"
combinedName = "search → (←)"
combinedDescription = "search forwards (backgwards)"
combinedKey = "/ (shift+/)"
args.offset = "start"
args.register = "search"

[[bind]]
path = "edit.motion.search"
key = "shift+/"
name = "search bk"
description = "search backwards"
combinedName = "search → (←)"
args.offset = "start"
args.register = "search"
args.backwards = true

[[bind]]
path = "edit.motion.search"
key = "n"
name = "→ search"
description = "Go to the next match of the search query"
command = "master-key.nextMatch"
args.register = "search"
computedArgs.repeat = "(count || 1)-1"

[[bind]]
path = "edit.motion.search"
key = "shift+n"
name = "← search"
description = "Go to the previous match of the search query"
command = "master-key.previousMatch"
args.register = "search"
computedArgs.repeat = "(count || 1)-1"

[[bind]]
path = "edit.motion.search"
key = "shift+8"
name = "match →"
description = "Next match to object under cursor"
combinedName = "match →/←"
combinedDescription = "Next/previous match to object under cursor"
combinedKey = "shift+8/7"
computedArgs.text = "firstSelectionOrWord"
args.offset = "start"
args.register = "search"

[[bind]]
path = "edit.motion.search"
key = "shift+7"
name = "match ←"
description = "Previous match to object under cursor"
combinedName = "match →/←"
computedArgs.text = "firstSelectionOrWord"
args.offset = "start"
args.register = "search"
args.backwards = true

[[bind]]
path = "edit.motion.search"
key = "f"
name = "find char"
description = "Find the next char (include char in selection)"
combinedName = "find char (back)"
combinedDescription = "Find the next (previous) char (include char in selection)"
combinedKey = "f (shift+f)"
args.acceptAfter = 1
computedArgs.skip = "count-1"
args.offset = "inclusive"

[[bind]]
path = "edit.motion.search"
key = "shift+f"
name = "find char back"
description = "Find the previous char (include char in selection)"
combinedName = "find char (back)"
args.acceptAfter = 1
args.offset = "inclusive"
args.backwards = true
computedArgs.skip = "count-1"

[[bind]]
path = "edit.motion.search"
key = "t"
name = "to char"
description = "Find the next char (exclude char in selection)"
combinedName = "to char (back)"
combinedKey = "t (shift+t)"
combinedDescription = "Find the next/previous char (exclude char in selection)"
args.acceptAfter = 1
args.offset = "start"
computedArgs.skip = "count-1"

[[bind]]
path = "edit.motion.search"
key = "shift+t"
name = "to char back"
description = "Find the previous char (exclude char in selection)"
combinedName = "to char (back)"
args.acceptAfter = 1
args.offset = "end"
args.backwards = true
computedArgs.skip = "count-1"

[[bind]]
path = "edit.motion.search"
key = "s"
name = "find char pair"
description = "To next character pair"
combinedName = "char pair →/←"
combinedDescription = "To next character pair"
combinedKey = "s/shift+s"
args.acceptAfter = 2
args.offset = "start"
computedArgs.skip = "count-1"
mode = "normal"

[[bind]]
path = "edit.motion.search"
key = "shift+s"
name = "char pair back"
description = "To previous character pair"
combinedName = "char pair →/←"
args.acceptAfter = 2
args.offset = "start"
computedArgs.skip = "count-1"
args.backwards = true

## Goto commands
## --------------------------------

[[bind]]
path = "edit.motion"
key = "g"
priority = 1
name = "goto"
command = "master-key.prefix"
description = """
Goto commands move the location of the cursor (or the active selection position) forward
or backwards in some direction.
"""

[[bind]]
path = "edit.motion.prim"
key = "g j"
priority = 1
name = "unwrp ↓"
combinedName = "unwrap ↓/↑"
combinedKey = "j/k"
combinedDescription = """
move cursor up/down unwrapped text line; if a single line is wrapped into multiple lines by
the editor, this command skips all such wrapped lines
"""
description = """
down unwrapped line; if a single line is wrapped into multiple lines by the editor, this
command skips all such wrapped lines
"""
args.to = "down"
args.by = "line"

[[bind]]
path = "edit.motion.prim"
key = "g k"
priority = 1
name = "unwrp ↑"
combinedName = "unwrap ↓/↑"
description = "up unwrapped line"
args.to = "up"
args.by = "line"

[[bind]]
path = "edit.motion.prim"
key = "g shift+k"
priority = 1
combinedName = "unwrp sel ↑/↓"
combinedDescription = "select unwrapped lines up/down"
combinedKey = "shift+k/j"
name = "unwrp sel ↑"
description = "select unwrapped lines upwards"
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "up", by = "line", select = true }
computedArgs = { value = "count" }

[[bind.args.commands]]
command = "expandLineSelection"

[[bind]]
path = "edit.motion.prim"
key = "g shift+j"
priority = 1
name = "sel ↓"
combinedName = "unwrp sel ↑/↓"
description = "select unwrapped lines downwards"
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "down", by = "line", select = true }
computedArgs = { value = "count" }

[[bind.args.commands]]
command = "expandLineSelection"

[[bind]]
path = "edit.motion.prim"
key = "shift+g"
priority = 1
name = "doc end"
description = "select to end of document"
combinedName = "doc top/bottom"
combinedDescription = "select to top/bottom of document"
combinedKey = ",/."
command = "cursorBottomSelect"

[[bind]]
path = "edit.motion.prim"
key = "g g"
priority = 1
name = "doc start"
description = "select to start of document"
command = "cursorTopSelect"

[[bind]]
path = "edit.motion.obj"
key = "g w"
priority = 1
name = "WORD →"
combinedName = "WORD →/←"
combinedDescription = """
next/prev WORD;  e.g. contiguous non-whitespace region
"""
combinedKey = "w/b"
description = "next WORD; e.g. contiguous non-whitespace region"
args.unit = "WORD"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "g b"
priority = 1
name = "WORD ←"
combinedName = "WORD →/←"
description = "previous WORD; e.g. contiguous non-whitespace region"
args.unit = "WORD"
computedArgs.value = "-count || -1"

[[bind]]
path = "edit.motion.obj"
key = "g e"
priority = 1
name = "WORD end →"
description = "next WORD end; e.g. contiguous non-whitespace region"
args.unit = "WORD"
computedArgs.boundary = "around_on ? 'both' : 'end'"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "g /"
priority = 1
name = "comment →"
description = "next comment"
combinedKey = "/ (shift+/)"
combinedName = "comment → (←)"
combinedDescription = "move to next (previous) comment"
args.unit = "comment"
args.boundary = "both"
args.selectWhole = true
computedArgs = { value = "count || 1" }

[[bind]]
path = "edit.motion.obj"
key = "g shift+/"
priority = 1
name = "comment ←"
combinedName = "comment → (←)"
description = "previous comment"
args.unit = "comment"
args.boundary = "both"
args.selectWhole = true
computedArgs = { value = "count || 1" }

[[bind]]
path = "edit.motion.obj"
key = "g 0"
priority = 1
name = "sec →"
description = "next section"
combinedName = "sec →/←"
combinedDescription = "next/previous section"
combinedKey = "0/9"
args.unit = "section"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.obj"
key = "g 9"
priority = 1
name = "sec ←"
description = "previous section"
combinedName = "sec →/←"
args.unit = "section"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "window"
name = "goto line"
priority = 1
description = "goto line command"
key = "g l"
command = "workbench.action.gotoLine"
when = "editorTextFocus"

[[bind]]
path = "window"
name = "to refs"
priority = 1
description = "jump to a location where this symbol is referenced"
key = "g r"
command = "editor.action.goToReferences"
when = "editorTextFocus"

[[bind]]
path = "window"
name = "go to"
priority = 1
description = "go to the definition of symbol under cursor"
key = "g d"
combinedName = "go to (aside)"
combinedKey = "(shift+)d"
combinedDescription = "go to the definition of symbol (in ean editor to the side)"
command = "editor.action.revealDefinition"
when = "editorTextFocus"

[[bind]]
path = "window"
name = "go to, aside"
priority = 1
description = "go to the definition of symbol under cursor in an editor to the side"
key = "g shift+d"
combinedName = "go to (aside)"
command = "editor.action.revealDefinitionAside"
when = "editorTextFocus"

[[bind]]
path = "window"
name = "open"
description = "open the file name under the cursor"
key = "g f"
command = "extension.openFileFromPath"
when = "editorTextFocus"

[[bind]]
path = "edit.motion"
key = "g c"
name = "cell →"
description = "next notebook cell"
combinedName = "cell →/←"
combinedDescription = "next/prev notebook cell"
combinedKey = "c/shift+c"
when = "editorLangId == 'markdown' || editorLangId == 'quarto'"
command = "runCommands"
args.commands = ["terminal-polyglot.next-fence-select", "selection-utilities.revealActive"]

[[bind]]
path = "edit.motion"
key = "g c"
name = "cell →"
combinedName = "cell →/←"
when = "!(editorLangId == 'markdown' || editorLangId == 'quarto')"
command = "runCommands"
args.commands = [ "jupyter.gotoNextCellInFile", "jupyter.selectCell" ]
description = "previous jupyter notebook cell"

[[bind]]
path = "edit.motion"
key = "g shift+c"
name = "cell ←"
combinedName = "cell →/←"
description = "previous jupyter notebook cell"
when = "editorLangId == 'markdown' || editorLangId == 'quarto'"
command = "runCommands"
args.commands = ["terminal-polyglot.prev-fence-select", "selection-utilities.revealActive"]


[[bind]]
path = "edit.motion"
key = "g shift+c"
name = "cell ←"
combinedName = "cell →/←"
description = "previous jupyter notebook cell"
when = "!(editorLangId == 'markdown' || editorLangId == 'quarto')"
command = "runCommands"
args.commands = ["jupyter.gotoPrevCellInFile", "jupyter.selectCell"]

## Match commands
## --------------------------------

[[path]]
id = "edit.motion.match"
name = "Matching Motions"
description = "Motions that match some range of characters"

[[path]]
id = "edit.motion.match.obj"
name = "Matching Object Motions"
description = "Motions that match some range of characters by predefined regex"
default.command = "selection-utilities.moveBy"
default.kind = "motion"
default.args.selectWhole = true
default.args.boundary = "start"

[[bind]]
path = "edit.motion.match"
key = "m"
name = "match"
description = """
Find the closet character range matching a specified object.
"""
kind = "motion"
command = "master-key.prefix"

[[bind]]
path = "edit.motion.match"
key = "m m"
prefixes = [""]
name = "smart expand"
description = "Use VSCode's built-in smart expansion command"
command = "editor.action.smartSelect.expand"

[[bind]]
path = "edit.motion.match.obj"
key = "m w"
name = "around subwrd →"
description = "(camel/snake case)"
combinedName = "around subwrd ←/→"
combinedDescription = "(camel/snake case)"
combinedKey = "w/b"
args.unit = "subword"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m b"
name = "around subwrd ←"
description = "(camel/snake case)"
combinedName = "around subwrd ←/→"
args.unit = "subword"
computedArgs.value = "-count || -1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+w"
name = "ard word →"
combinedName = "around word →/←"
combinedKey = "shift+w/b"
args.unit = "word"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+b"
name = "ard word ←"
combinedName = "around word →/←"
prefixes = [""]
args.unit = "word"
computedArgs.value = "-count || -1"

[[bind]]
path = "edit.motion.match.obj"
key = "m e"
name = "in subwrd"
combinedName = "in → subword/word"
combinedKey = "e/shift+e"
args.unit = "subword"
args.boundary = "both"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+e"
name = "in word"
combinedName = "in → subword/word"
args.unit = "word"
args.boundary = "both"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m p"
name = "in parag. →"
combinedName = "in paragraph →/←"
combinedKey = "p/o"
args.boundary = "both"
args.unit = "paragraph"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m o"
name = "in parag. ←"
combinedName = "in paragraph →/←"
args.unit = "paragraph"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+p"
name = "arn parag. →"
combinedName = "around paragraph →/←"
combinedKey = "shift+p/shift+o"
args.unit = "paragraph"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+o"
name = "arn parag. ←"
combinedName = "around paragraph →/←"
args.unit = "paragraph"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.match.obj"
key = "m 0"
name = "arn subsec →"
combinedName = "around subsection →/←"
combinedKey = "0/shift+0"
args.unit = "subsection"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+0"
name = "arn subsec ←"
combinedName = "around subsection →/←"
args.unit = "subsection"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m 9"
name = "in subsec →"
combinedName = "in subsection →/←"
combinedKey = "9/shift+9"
args.unit = "subsection"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+9"
name = "in subsec ←"
combinedName = "in subsection →/←"
args.unit = "subsection"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match"
key = "m g"
name = "other..."
description = "additional objects to match..."
command = "master-key.prefix"

[[bind]]
path = "edit.motion.match.obj"
key = "m g 0"
name = "section →"
combinedName = "section →/←"
combinedKey = "0/9"
args.unit = "section"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m g 9"
name = "section ←"
combinedName = "section →/←"
args.unit = "section"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.match.obj"
key = "m g w"
name = "around WORD →"
combinedName = "around WORD →/←"
combinedKey = "w/b"
args.unit = "WORD"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m g b"
name = "around WORD ←"
combinedName = "around WORD →/←"
args.unit = "WORD"
computedArgs.value = "-(count || 1)"

[[bind]]
path = "edit.motion.match.obj"
key = "m g e"
name = "in WORD"
args.unit = "WORD"
args.boundary = "both"
computedArgs.value = "count || 1"

[[path]]
id = "edit.motion.match.syntax"
name = "Motions around syntactic objects (e.g. parentheses and quotes)"
description = """
selection commands that move by a predefined syntactic object like brackets and quotes
"""

[[bind]]
path = "edit.motion.match.syntax"
key = "m ["
name = "in parens"
combinedName = "in/arnd parens"
combinedKey = "[/shift+["
combinedDescription = """
expand inside/around parens/brackets/braces and their contents; repeated calls to this command
will seek out larger and larger scopes
"""
description = """
expand inside parens/brackets/braces and their contents; repeated calls to this command
will seek out larger and larger scopes
"""
command = "selection-utilities.expandWithinBrackets"

[[bind]]
path = "edit.motion.match.syntax"
key = "m shift+["
name = "arnd parens"
combinedName = "in/arnd parens"
description = """
expand inside parens/brackets/braces and their contents; repeated calls to this command
will seek out larger and larger scopes
"""
command = "selection-utilities.expandAroundBrackets"

[[bind]]
path = "edit.motion.match.syntax"
key = "m '"
name = "in quotes"
description = """
select within current quotes; repeated calls to this command
will seek out larger and larger scopes
"""
combinedName = "in/arnd quotes"
combinedKey = "'/shift+'"
combinedDescription = """
select around/within current quotes; repeated calls to this command
will seek out larger and larger scopes
"""
command = "bracketeer.selectQuotesContent"

[[bind]]
path = "edit.motion.match.syntax"
key = "m shift+'"
name = "around quotes"
combinedName = "in/arnd quotes"
description = """
select around current quotes; repeated calls to this command
will seek out larger and larger scopes
"""
command = "runCommands"
args.commands = ["bracketeer.selectQuotesContent", "bracketeer.selectQuotesContent"]

[[bind]]
path = "edit.motion.match.syntax"
key = "m shift+."
name = "in <>"
description = "text inside angle brackets"
combinedName = "in <> / in ><"
combinedKey = "shift+. / shift+,"
combinedDescription = "text inside angle brackets / pairs (e.g. text in <a>text</a>)"
command = "extension.selectAngleBrackets"

[[bind]]
path = "edit.motion.match.syntax"
key = "m shift+,"
name = "in ><"
combinedName = "in <> / in ><"
description = "text inside tag pairs (e.g. <a>text</a>)"
command = "extension.selectInTag"

[[bind]]
path = "edit.motion.match.syntax"
key = "m space"
name = "in indent"
description = "all text at the same indentation level"
combinedName = "in/arnd"
combinedKey = "space/shift+space"
combinedDescription = """
all text at the same indentation level / all indentation along with the line above and
below this (ala c-like syntax)
"""
command = "vscode-select-by-indent.select-inner"

[[bind]]
path = "edit.motion.match.syntax"
key = "m shift+space"
name = "arnd indent"
description = """
all text at the same indentation level along with the line above and below
this (ala c-like syntax)
"""
combinedName = "in/arnd"
command = "vscode-select-by-indent.select-outer"

[[bind]]
path = "edit.motion.match.syntax"
key = "m g space"
name = "indent+top"
description = """
all text at the same indentation level and the line just above it (ala python syntax)
"""
combinedName = "in/arnd"
command = "vscode-select-by-indent.select-outer-top-only"

[[bind]]
path = "edit.motion.match.obj"
key = "m /"
name = "comment →"
combinedName = "comment →/←"
combinedKey = "/ (shift+/)"
args.unit = "comment"
args.boundary = "both"
computedArgs.value = "count || 1"

[[bind]]
path = "edit.motion.match.obj"
key = "m shift+/"
name = "comment ←"
combinedName = "comment →/←"
args.unit = "comment"
args.boundary = "both"
computedArgs.value = "-(count || 1)"

[[path]]
id = "edit.motion.match.cell"
name = "Matching Object Motions"
description = "Motions that match some range of characters by predefined regex"

[[bind]]
path = "edit.motion.match.cell"
name = "in cell"
description = "select text within a cell (ala jupyter)"
key = "m c"
when = "editorLangId == 'markdown' || editorLangId == 'quarto'"
command = "runCommands"
args.commands = ["terminal-polyglot.select-fence", "selection-utilities.revealActive"]

[[bind]]
path = "edit.motion.match.cell"
name = "in cell"
description = "select text within a cell (ala jupyter)"
key = "m c"
when = "!(editorLangId == 'markdown' || editorLangId == 'quarto')"
command = "jupyter.selectCell"

[[path]]
id = "edit.motion.searchpair"
name = "Search pairs"
description = "Find text that falls between pairs of characters"

[[bind]]
path = "edit.motion.searchpair"
name = "between pair"
description = """
Select between to pairs of the same N characters (m) or distinct sets of N
characters (s), where N is the count:
2mt'' would search for a string between '' and ''.
2ms,,.. would search for a string between ,, and ..
"""
key = "m t"
command = "runCommands"
combinedName = "between pair/two"
combinedKey = "t/s"
combinedDescription = """
"""

[[bind.args.commands]]
command = "master-key.captureKeys"
computedArgs.acceptAfter = "count || 1"

[[bind.args.commands]]
command = "selection-utilities.selectBetween"
computedArgs.str = "captured"
args.inclusive = false

[[bind]]
path = "edit.motion.searchpair"
name = "between two"
description = """
Select between two different sets of N characters, where N is the count e.g.
2ms,,.. would search for a string between ,, and ..
"""
key = "m s"
combinedKey = "t/s"
command = "runCommands"

[[bind.args.commands]]
command = "master-key.captureKeys"
computedArgs.acceptAfter = "2*(count || 1)"

[[bind.args.commands]]
command = "selection-utilities.selectBetween"
computedArgs.between.from = "captured.slice(0, captured.length/2)"
computedArgs.between.to = "captured.slice(captured.length/2)"
args.inclusive = false

## Simple Actions
## --------------------------------

[[path]]
id = "edit.action"
name = "Actions"
description = "Commands that modify the document or UI"
default.kind = "action"
default.mode = "normal"


[[path]]
id = "edit.action.basic"
name = "Basic Actions"
description = "Essential actions required to edit text"

[[bind]]
path = "edit.action.basic"
# TODO: add documentation to these basic editor keys
key = "i"
name = "insert"
description = "Switch to insert mode (right before character)"
command = "runCommands"
args.commands = ["selection-utilities.shrinkToActive", "master-key.enterInsert"]
mode = ["normal", "selectedit"]

[[bind]]
path = "edit.action.basic"
key = "a"
mode = ["normal", "selectedit"]
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      "cursorRight",
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "shift+i"
name = "insert start"
mode = ["normal", "selectedit"]
command = "runCommands"
args.commands = [
      { command = "cursorMove", args = { to = "wrappedLineFirstNonWhitespaceCharacter", select = false } },
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "shift+a"
name = "insert end"
mode = ["normal", "selectedit"]
command = "runCommands"
args.commands = [
      { command = "cursorMove", args = { to = "wrappedLineEnd", select = false } },
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "c"
name = "change"
description = """
Without a count: change selected region of text. With a count:
change up to `count` lines.
"""
when = "editorHasMultilineSelection"
command = "runCommands"
args.commands = ["deleteRight", "editor.action.insertLineBefore", "master-key.enterInsert"]

[[bind]]
path = "edit.action.basic"
key = "c"
when = "!editorHasMultilineSelection && editorHasSelection"
command = "runCommands"
args.commands = ["deleteRight", "master-key.enterInsert"]

[[bind]]
path = "edit.action.basic"
key = "c"
when = "!editorHasSelection && master-key.count <= 1"
command = "runCommands"
args.commands = [
      "expandLineSelection",
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "c"
when = "!editorHasSelection && master-key.count > 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "shift+c"
name = "change to/back"
description = """Without a count: change from current char to end of line. With a count:
change the previous `count` lines.
"""
mode = "normal"
when = "master-key.count <= 1"
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      "deleteAllRight",
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "shift+c"
mode = ["normal", "selectedit"]
when = "master-key.count > 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesUp" },
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind]]
path = "edit.action.basic"
key = "x"
mode = "normal"
name = "delete char"
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      { command = "cursorMove", args = { to = "right", select = true }, computedArgs = { value = "count" } },
     "editor.action.clipboardCutAction"
]

[[bind]]
path = "edit.action.basic"
key = "r"
name = "replace char"
description = "replace the character under the cursor"
command = "master-key.replaceChar"

[[bind]]
path = "edit.action.basic"
key = "ctrl+i"
name = "insert char"
mode = ["normal", "selectedit"]
description = "insert a character in front of the cursor"
command = "master-key.insertChar"

[[path]]
id = "edit.action.clipboard"
name = "Clipboard Operations"
description = "Operations that manipulate the clipboard in some way."

[[bind]]
path = "edit.action.clipboard"
key = "p"
name = "paste after"
description = "Paste clipboard after the cursor/selection"
combinedName = "paste before/after"
combinedDescription = "Paste clipboard before/after the cursor/selection"
combinedKey = "p/shift+p"
when = "editorHasSelection"
command = "runCommands"
args.commands = ["selection-utilities.activeAtEnd", "selection-utilities.shrinkToActive", "editor.action.clipboardPasteAction"]

[[bind]]
path = "edit.action.clipboard"
key = "p"
name = "paste after"
combinedName = "paste before/after"
when = "!editorHasSelection"
command = "runCommands"
args.commands = ["cursorRight", "editor.action.clipboardPasteAction"]

[[bind]]
path = "edit.action.clipboard"
key = "shift+p"
name = "paste before"
combinedName = "paste before/after"
description = "Paste before the cursor/selection"
when = "editorHasSelection"
command = "runCommands"
args.commands = ["selection-utilities.activeAtStart", "selection-utilities.shrinkToActive", "editor.action.clipboardPasteAction"]

[[bind]]
path = "edit.action.clipboard"
key = "shift+p"
combinedName = "paste before/after"
when = "!editorHasSelection"
command = "runCommands"
args.commands = ["cursorRight", "editor.action.clipboardPasteAction"]

[[bind]]
path = "edit.action.history"
name = "repeat action"
description = """
Repeat the last action command. Actions usually modify the text of a document in one way or
another. (But, e.g. sending text to the REPL is also considered an editor action).
"""
key = "."
command = "runCommands"
repeat = "count"

[[bind.args.commands]]
command = "master-key.replayFromHistory"
# we can repeat any action but history-related actions; we make an exception
# for replaying macros, which can be repeated
args.at = """
commandHistory[i].path.startsWith('edit.action') &&
(!commandHistory[i].path.startsWith('edit.action.history') ||
 commandHistory[i].name == 'replay')
"""

[[bind.args.commands]]
command = "master-key.enterNormal"

[[bind]]
path = "edit.action.history"
name = "undo"
key = "u"
command = "runCommands"
args.commands = [ "undo", "selection-utilities.shrinkToActive" ]

[[bind]]
path = "edit.action.history"
name = "redo"
key = "shift+u"
command = "runCommands"
args.commands = [ "redo", "selection-utilities.shrinkToActive" ]

[[bind]]
path = "edit.motion.prim"
key = '\'
name = "→ sel"
description = "select *just* the character to the right"
mode = ["normal", "selectedit"]
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "right", select = true }
computedArgs = { value = "count" }

[[bind]]
path = "edit.motion.prim"
key = 'shift+\'
name = "← sel"
description = "select *just* the character to the left"
mode = ["normal", "selectedit"]
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorMove"
args = { to = "left", select = true }
computedArgs = { value = "count" }

[[path]]
id = "edit.motion.mod"
name = "Modify Motion Effects"
description = "Keys that change how other motions work"
default.kind = "motion"

[[bind]]
path = "edit.motion.obj"
key = "shift+4"
name = "all"
description = "Select entire document"
command = "editor.action.selectAll"

[[bind]]
path = "edit.motion"
key = "shift+r"
name = "expand no wht"
description = "select full line(s), and trim external whitespace"
command = "selection-utilities.trimSelectionWhitespace"

[[bind]]
path = "edit.motion"
name = 'narrow to subword'
description = "Narrow current selection so it starts and stops at a subword (e.g. 'snake' in snake_case)"
key = "shift+z"
command = "selection-utilities.narrowTo"
args.unit = "subident"
args.boundary = "both"

[[bind]]
path = "edit.action.basic"
name = 'toggle check'
description = "Toggle a markdown checkbox"
key = "shift+6"
command = "markdown-checkbox.markCheckbox"

[[bind]]
path = "edit.action.clipboard"
key = "d"
name = "delete"
description = """
Without a count: delete selected text (and store to clipboard). With a
count, delete up to the next `count` lines and store to clipboard.
"""
when = "!editorHasSelection"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.clipboardCutAction",
      { command = "master-key.setMode", args = { value = "normal" } },
]

[[bind]]
path = "edit.action.clipboard"
key = "d"
when = "editorHasSelection"
command = "runCommands"
args.commands = [
      "editor.action.clipboardCutAction",
      { command = "master-key.setMode", args = { value = "normal" } },
]

[[bind]]
path = "edit.action.clipboard"
key = "shift+d"
mode = "normal"
name = "without count: Delete from cursor to end of line; with count: Delete from current line up `count` number of keys."
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      { command = "cursorMove", args = { to = "wrappedLineEnd", select = true} },
      "editor.action.clipboardCutAction"
]

[[bind]]
path = "edit.action.clipboard"
key = "shift+d"
mode = "normal"
when = "master-key.count > 1"
command = "runCommands"
args.commands = [{ defined = "selectLinesUp" }, "deleteRight"]

[[bind]]
path = "edit.action.clipboard"
key = "y"
name = "copy"
description = "copy selected text to clipboard"
command = "runCommands"
args.commands = ["editor.action.clipboardCopyAction", "selection-utilities.shrinkToActive"]

[[bind]]
path = "edit.action.clipboard"
key = "shift+y"
name = "copy (eol/up)"
description = "without a count: copy to end of line; with a count: copy this and the previous N lines"
when = "master-key.count <= 1"
command = "runCommands"
args.commands = [
      "selection-utilities.shrinkToActive",
      { command = "cursorMove", args = { to = "wrappedLineEnd", select = true} },
      "editor.action.clipboardCopyAction",
      "editor.action.shrinkToActive"
]

[[bind]]
path = "edit.action.clipboard"
key = "shift+y"
when = "master-key.count > 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesUp" },
      "editor.action.clipboardCopyAction",
      "editor.action.shrinkToActive"
]

[[path]]
id = "edit.action.open_lines"
name = "Line opening actions"
description = """
These commands provides several ways of adding lines above or below the current line
"""

[[path]]
id = "edit.action.indent"
name = "Indentation"
description = """
Operations that affect line indentation
"""

[[bind]]
path = "edit.action.indent"
key = "shift+."
name = "indent"
description = "Indent lines"
when = "master-key.count >= 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.indentLines",
      "selection-utilities.shrinkToActive"
]

[[bind]]
path = "edit.action.indent"
key = "shift+."
name = "indent"
description = "Indent lines"
command = "editor.action.indentLines"

[[bind]]
path = "edit.action.indent"
key = "shift+,"
name = "deindent"
when = "master-key.count >= 1"
description = "Deindent lines"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.outdentLines",
      "selection-utilities.shrinkToActive"
]

[[bind]]
path = "edit.action.indent"
key = "shift+,"
name = "deindent"
when = "master-key.count < 1"
description = "De-indent lines"
command = "editor.action.outdentLines"

[[path]]
id = "edit.action.history"
name = "History Commands"
description = "Commands that interact with edit or cursor history."

## Number actions
## --------------------------------

[[path]]
id = "edit.action.numbers"
name = "Number Editing"
description = "Commands that modify one or more numbers"

[[bind]]
path = "edit.action.numbers"
name = 'inc #'
description = "Increment a number by 1 (increases increment for subsequent selections)"
key = "="
when = "editorHasMultipleSelections"
command = "editor.emmet.action.incrementNumberByOne"

[[bind]]
path = "edit.action.numbers"
key = "="
command = "extension.incrementSelection"

[[bind]]
path = "edit.action.numbers"
name = 'dec #'
description = "Decrement a number by 1 (increases increment for subsequent selections)"
key = "shift+="
when = "editorHasMultipleSelections"
command = "editor.emmet.action.decrementNumberByOne"

[[bind]]
path = "edit.action.numbers"
key = "shift+="
command = "extension.decrementSelection"

## Capitalization
## --------------------------------

[[path]]
id = "edit.action.capitals"
name = "Capitlization Actions"
description = "Actions that change how words are capitalized"
default.mode = ["normal", "selectedit"]

[[bind]]
path = "edit.action.capitals"
name = 'camel'
description = "Swap style to lower camel case (`camelCase`)"
key = "` c"
command = "extension.changeCase.camel"

[[bind]]
path = "edit.action.capitals"
name = 'constant'
description = "Swap style to constant (`IS_CONSTANT`)"
key = "` shift+u"
command = "extension.changeCase.constant"

[[bind]]
path = "edit.action.capitals"
name = 'dot'
description = "Swap style to dot case (`dot.case`)"
key = "` ."
command = "extension.changeCase.dot"

[[bind]]
path = "edit.action.capitals"
name = 'kebab'
description = "Swap style to kebab case (`kebab-case`)"
key = "` -"
command = "extension.changeCase.kebab"

[[bind]]
path = "edit.action.capitals"
name = 'all lower'
description = "Swap all to lower case"
key = "` shift+l"
command = "extension.changeCase.lower"

[[bind]]
path = "edit.action.capitals"
name = 'first lower'
description = "Swap first letter to lower case"
key = "` l"
command = "extension.changeCase.lowerFirst"

[[bind]]
path = "edit.action.capitals"
name = 'spaces'
description = "Swap to spaces (`camelCase` -> `camel case`)"
key = "` space"
command = "extension.changeCase.no"

[[bind]]
path = "edit.action.capitals"
name = 'Camel'
description = "Swap to upper camel case (`CamelCase`)"
key = "` shift+c"
command = "extension.changeCase.pascal"

[[bind]]
path = "edit.action.capitals"
name = 'path'
description = "Swap to 'path' case (`path/case`)"
key = "` /"
command = "extension.changeCase.path"

[[bind]]
path = "edit.action.capitals"
name = 'snake'
description = "Swap to snake case (`snake_case`)"
key = "` shift+-"
command = "extension.changeCase.snake"

[[bind]]
path = "edit.action.capitals"
name = 'swap'
description = "Swap upper and lower case letters"
key = "` s"
command = "extension.changeCase.swap"

[[bind]]
path = "edit.action.capitals"
name = 'title'
description = "Swap to title case (all words have first upper case letter)"
key = "` t"
command = "extension.changeCase.title"

[[bind]]
path = "edit.action.capitals"
name = 'all upper'
description = "Swap to use all upper case letters"
key = "` shift+y"
command = "extension.changeCase.upper"

[[bind]]
path = "edit.action.capitals"
name = 'first upper'
description = "Swap first character to upper case"
key = "` u"
command = "extension.changeCase.upperFirst"

[[bind]]
path = "edit.action.capitals"
name = 'toggle'
description = "Toggle through all possible cases"
key = "` `"
command = "extension.toggleCase"

## Do actions
## --------------------------------

[[path]]
id = "edit.action.do"
name = "'Do' actions"
description = "Additional actions organized under the `'` (or 'do') prefix."
default.mode = "normal"

[[bind]]
path = "edit.action.do"
name = "do"
key = "space"
description = "additional actions, mostly for modifying specific syntactic formats"
command = "master-key.prefix"

[[bind]]
path = "edit.action.do"
name = "paste after line"
combinedName = "paste after/before line"
combinedKey = "p/shift+p"
description = "Paste text after current line"
priority = 2
key = "space p"
command = "runCommands"
args.commands = [
      "expandLineSelection",
      "selection-utilities.activeAtEnd",
      "selection-utilities.shrinkToActive",
      "editor.action.clipboardPasteAction",
]

[[bind]]
path = "edit.action.do"
priority = 2
name = "paste before line"
combinedName = "paste after/before line"
description = "Paste text before current line"
key = "space shift+p"
command = "runCommands"
args.commands = [
      "expandLineSelection",
      "selection-utilities.activeAtStart",
      "selection-utilities.shrinkToActive",
      "editor.action.clipboardPasteAction",
]

[[bind]]
path = "edit.action.do"
priority = 2
name = "add line below"
combinedName = "add line below/above"
combinedDescription = "open a line below/above current line"
combinedKey = "o/shift+o"
description = "open a line below current line"
key = "space o"
command = "editor.action.insertLineAfter"

[[bind]]
path = "edit.action.do"
name = "add line above"
priority = 2
combinedName = "add line below/above"
description = "open a line above current line"
key = "space shift+o"
command = "editor.action.insertLineBefore"

[[bind]]
path = "edit.action.do"
name = 'sym insert'
description = "Insert a character a pair around a character"
priority = 1
key = "space i"
combinedName = "sym insert (mode)"
combinedDescription = "Insert characters around pair (switching to syminster mode until hitting  again)"
combinedKey = "i/shift+i"
command = "runCommands"

[[bind.args.commands]]
command = "master-key.captureKeys"
args.acceptAfter = 1

[[bind.args.commands]]
command = "type"
computedArgs.text = "captured"

[[bind]]
path = "edit.action.do"
name = 'trim white'
description = "Delete all external whitespace (left and right edges)"
key = "space shift+-"
command = "selection-utilities.trimWhitespace"

[[bind]]
path = "edit.action.do"
key = "space w"
name = "wrap p"
combinedName = "wrap/join lines"
description = "wrap paragraph text, preserving commenting"
combinedDescription = "wrap paragraph text, preserving commenting / join lines together"
combinedKey = "w/j"
command = "rewrap.rewrapComment"

[[bind]]
path = "edit.action.basic"
name = 'join'
combinedName = "wrap/join lines"
description = "Remove newline between current and next line"
key = "space j"
mode = ["normal", "selectedit"]
when = "!editorHasSelection"
command = "runCommands"
args.commands = [ { defined = "selectLinesDown" }, 'editor.action.joinLines' ]

[[bind]]
path = "edit.action.basic"
combinedName = "wrap/join lines"
name = 'join'
description = "Remove newline between current and next line"
mode = ["normal", "selectedit"]
key = "space j"
command = "editor.action.joinLines"

[[bind]]
path = "edit.action.do"
key = "space f"
name = "format"
combinedName = "format"
description = "Format code"
when = "master-key.count >= 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.formatSelection",
      "selection-utilities.shrinkToActive"
]

[[bind]]
path = "edit.action.do"
key = "space f"
name = "format"
when = "master-key.count < 1"
command = "editor.action.formatSelection"

[[path]]
id = "edit.action.brackets"
name = 'Bracket/Quote Editing'
description = "Commands that edit two matching brackets or quotes."

[[bind]]
path = "edit.action.do"
name = 'parens'
description = "actions related to various brackets (`[`, `(`, `{`)"
key = "space ["
command = "master-key.prefix"

[[bind]]
path = "edit.action.do"
name = 'remove'
description = "Removes surrounding pairs"
key = "space [ d"
command = "bracketeer.removeBrackets"

[[bind]]
path = "edit.action.do"
name = 'parens/brackets'
description = "Swap between `[`, `(` and `{`"
key = "space [ s"
command = "bracketeer.swapBrackets"

[[bind]]
path = "edit.action.do"
name = 'quotes'
description = "Actions related to quotes"
key = "space '"
command = "master-key.prefix"

[[bind]]
path = "edit.action.do"
name = 'remove'
description = "Removes quotes (', \" or `)"
key = "space ' d"
command = "bracketeer.removeQuotes"

[[bind]]
path = "edit.action.do"
name = 'swap'
description = "Swap quotes (', \" or `)"
key = "space ' s"
command = "bracketeer.swapQuotes"

[[path]]
id = "edit.action.comment"
name = "Comments"
description = """
Operations that modify comments
"""

[[bind]]
path = "edit.action.do"
key = "space /"
name = "comment lines"
combinedName = "(block) comment"
combinedDescription = "Toggle (block) comment"
combinedKey = "(shift+)/"
description = "select next comment"
when = "master-key.count >= 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.commentLine",
]

[[bind]]
path = "edit.action.do"
key = "space /"
combinedName = "(block) comment"
when = "master-key.count < 1"
command = "editor.action.commentLine"

[[bind]]
path = "edit.action.do"
key = "space shift+/"
name = "block comment lines"
combinedName = "(block) comment"
description = "select previous comment"
when = "master-key.count >= 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "editor.action.blockComment",
      "selection-utilities.shrinkToActive",
]

[[bind]]
path = "edit.action.do"
key = "space shift+/"
when = "master-key.count < 1"
combinedName = "(block) comment"
command = "editor.action.blockComment"

[[bind]]
path = "edit.action.do"
name = 'inc all #'
combinedName = "inc/dec all #"
combinedDescription = "Increment/decrement all numbers by 1"
combinedKey = "=/shift+="
description = "Increment all numbers by 1"
key = "space ="
command = "editor.emmet.action.incrementNumberByOne"

[[bind]]
path = "edit.action.do"
name = 'dec all #'
combinedName = "inc/dec all #"
description = "Decrement all numbers by 1"
key = "space shift+="
command = "editor.emmet.action.decrementNumberByOne"

[[bind]]
path = "edit.action.do"
name = "activate"
description = "Activate the julia project associated with the current file in the active REPL"
key = "space a"
when = "editorLangId == 'julia'"
command = "terminal-polyglot.send-command"
args.cmd = "activate_from(\"%file%\")"

[[bind]]
path = "edit.action.do"
name = "activate tests"
description = "Activate the julia project test environmentassociated with the current file in the active REPL"
key = "space t"
when = "editorLangId == 'julia'"
command = "terminal-polyglot.send-command"
args.cmd = "\nbegin; activate_from(\"%file%\"); using TestEnv; TestEnv.activate(); end"

[[bind]]
path = "edit.action.do"
name = 'nb cell'
description = "Actions related to notebook cells"
key = "space c"
command = "master-key.prefix"

[[bind]]
path = "edit.action.do"
key = "space c i"
when = "editorLangId == 'quarto'"
command = "quarto.insertCodeCell"
name = "insert cell"
description = "insert a new cell in a notebook"

[[bind]]
path = "edit.action.do"
key = "space c s"
when = "editorLangId != 'quarto'"
command = "jupyter.selectCell"

[[bind]]
path = "edit.action.basic"
key = "space ."
name = 'sent. lines'
description = "Split paragraph into one line per sentence"
mode = "normal"
command = "runCommands"

[[bind.args.commands]]
command = "selection-utilities.moveBy"
args.unit = "paragraph"
args.boundary = "both"
args.selectWhole = true

[[bind.args.commands]]
command = "editor.action.joinLines"

[[bind.args.commands]]
command = "selection-utilities.createBy"
args.text = "."

[[bind.args.commands]]
command = "selection-utilities.shrinkToActive"

[[bind.args.commands]]
command = "cursorRight"

[[bind.args.commands]]
command = "type"
args.text = "\n"

[[bind.args.commands]]
command = "selection-utilities.cancelSelection"

## Repeat actions
## --------------------------------


[[bind]]
path = "edit.action.history"
name = "record"
description = "Start/stop recording Master Key commands"
key = "shift+q"
when = "!master-key.record"
command = "master-key.record"
args.on = true

[[bind]]
path = "edit.action.history"
name = "record"
description = """
Start/stop recording key presses defined by Master Key pushing it to the
top of the `history` stack once recording finishes."
"""
key = "shift+q"
when = "master-key.record"
command = "runCommands"

[[bind.args.commands]]
command = "master-key.record"
args.on = false

[[bind.args.commands]]
command = "master-key.pushHistoryToStack"
args.range.from = 'commandHistory[i-1].name === "record"'
args.range.to = "i"

[[bind]]
path = "edit.action.history"
name = "replay"
description = """
Replay the Master Key command sequence at the top of the `history` stack. Specifying
a count requests the Nth most recent item on this stack.
"""
key = "q q"
command = "master-key.replayFromStack"
computedArgs.index = "count"

[[bind]]
path = "edit.action.history"
name = "store macro"
description = """
Stores the top of the `history` stack into a named register. Specifying a count stores the
Nth most recent item on this stack.
"""
key = "q s"
command = "master-key.storeNamed"
args.description = "Save Macro"
args.name = "macro"
args.contents = "macro[macro.length-count-1]"

[[bind]]
path = "edit.action.history"
name = "replay stored"
description = """
Replay a recorded Master Key command sequence from a named register, pushing
it to the front of the history stack.
"""
key = "q r"
command = "runCommands"

[[bind.args.commands]]
command = "master-key.restoreNamed"
args.description = "Macro"
args.name = "macro"

[[bind.args.commands]]
command = "master-key.pushHistoryToStack"
computedArgs.value = "captured"

[[bind.args.commands]]
command = "master-key.replayFromStack"
args.index = 0

[[bind]]
path = "edit.action.history"
name = "store last"
description = """
Store the N most recently run commands as a macro, where N is the count (defaulting to 1).
"""
key = "q l"
command = "master-key.pushHistoryToStack"
args.range.from = "i-(count || 0)"
args.range.to = "i"

## Utilities
## --------------------------------

[[bind]]
path = "window"
key = "shift+;"
name = "suggest"
resetTransient = false
hideInPalette = true
prefixes = []
mode = ["!capture", "!insert"]
description = """
show command suggestsion within the context of the current mode and keybinding prefix
(if any keys have already been typed)
"""
command = "master-key.commandSuggestions"

[[bind]]
path = "window"
key = "shift+ctrl+;"
name = "palette"
resetTransient = false
hideInPalette = true
mode = []
prefixes = "<all-prefixes>"
description = """
show command suggestsion within the context of the current mode and keybinding prefix
(if any keys have already been typed)
"""
command = "master-key.commandPalette"

[[bind]]
path = "edit.action"
name = "to repl"
description = """
send text to a terminal (usually containing a REPL); use language
specific extensions when available and put the pasted code into a block (when defined)."
"""
key = "["
when = "editorLangId == 'julia' && !editorHasSelection && count >= 1"
command = "runCommands"
args.commands = [
      { defined = "selectLinesDown" },
      "expandLineSelection", "selection-utilities.trimSelectionWhitespace",
      "language-julia.executeCodeBlockOrSelectionAndMove",
      "cursorUndo"
]

[[bind]]
path = "edit.action"
key = "["
when = "editorLangId == 'julia' && !editorHasSelection && !count"
command = "runCommands"
args.commands = [
      "expandLineSelection", "selection-utilities.trimSelectionWhitespace",
      "language-julia.executeCodeBlockOrSelectionAndMove",
      "cursorUndo"
]

[[bind]]
path = "edit.action"
key = "["
when = "editorLangId == 'julia' && editorHasSelection"
command = "runCommands"
args.commands = ["selection-utilities.trimSelectionWhitespace",
        "language-julia.executeCodeBlockOrSelectionAndMove",
        "cursorUndo"]

[[bind]]
path = "edit.action"
key = "["
when = "editorLangId != 'julia' && !(master-key.firstSelectionOrWord =~ /\\n/)"
command = "runCommands"
args.commands = ["terminal-polyglot.send-text",
        "selection-utilities.shrinkToActive"]

[[bind]]
path = "edit.action"
name = "repl"
key = "["
when = "editorLangId != 'julia' && master-key.firstSelectionOrWord =~ /\\n/"
command = "runCommands"
args.commands = ["terminal-polyglot.send-block-text",
      "selection-utilities.shrinkToActive"]

[[bind]]
path = "edit.action"
key = "z ["
name = "to repl (v2)"
combinedName = "to repl v2 (v3)"
description = """
send text to a terminal (usually containing a REPL), placing in a block when defined.
"""
combinedDescription = """
send text to a terminal (usually containing a REPL); v2 places the code in a block when defined (v3 does not).
"""
combinedKey = "[ / shift+["
command = "runCommands"
args.commands = ["terminal-polyglot.send-block-text", "selection-utilities.shrinkToActive"]

[[bind]]
path = "edit.action"
key = "z shift+["
name = "to repl (v3)"
combinedName = "to repl v2 (v3)"
description = """
send text to a terminal (usually containing a REPL)
"""
command = "runCommands"
args.commands = ["terminal-polyglot.send-text", "selection-utilities.shrinkToActive"]

[[bind]]
path = "edit.action"
name = "open terminal"
key = "]"
when = "master-key.count"
command = "terminal-polyglot.open-terminal-N"
computedArgs.index = "count"
args.focus = false

[[bind]]
path = "edit.action"
name = "open terminal"
key = "]"
when = "!master-key.count"
command = "terminal-polyglot.open-terminal"
computedArgs.index = "count"
args.focus = false

[[bind]]
path = "edit.util"
name = "git..."
description = "git commands"
key = "z g"
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "pull"
combinedName = "push/pull"
description = "pull changes from remote"
combinedDescription = "pull from/push to remote"
combinedKey = "p/shift+p"
key = "z g p"
command = "git.pull"

[[bind]]
path = "edit.util"
name = "push"
description = "push changes to remote"
key = "z g shift+p"
command = "git.push"

[[bind]]
path = "edit.util"
name = "checkout"
combinedName = "commit/checkout"
description = "commit changes"
combinedDescription = "commit/checkout git changes"
combinedKey = "c/shift+c"
key = "z g c"
command = "git.commit"

[[bind]]
path = "edit.util"
name = "checkout"
combinedName = "commit/checkout"
description = "checkout changes"
key = "z g shift+c"
command = "git.checkout"

## Leader Commands
## --------------------------------

# Miscellaneous commands organized under z

[[path]]
id = "edit.util"
name = "assorted misecellaneous commands"
default.kind = "util"

[[bind]]
path = "edit.util"
name = "utility"
key = "z"
description = "utility related commands: file opening, window manipulation, debugging etc..."
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "open recent"
description = "Open recent file"
key = "z r"
command = "workbench.action.openRecent"

[[bind]]
path = "edit.util"
name = "command"
description = "Show the VSCode command palette"
key = "z shift+;"
command = "workbench.action.showCommands"

[[bind]]
path = "edit.util"
name = "hover"
description = "show the hover view"
combinedName = "(debug) hover"
combinedDescription = "show the (debug) hover view"
combinedKey = "(shift+)h"
key = "z h"
command = "editor.action.showHover"

[[bind]]
path = "edit.util"
name = "debug hover"
combinedName = "(debug) hover"
description = "show the debug hover view"
key = "z shift+h"
command = "editor.debug.action.showDebugHover"

[[bind]]
path = "edit.util"
name = "add mark"
combinedName = "add mark / mark..."
description = "toggle bookmark at given line"
combinedDescription = """
toggle bookmark at given line / bookmark related commands
"""
key = "z shift+m"
combinedKey = "shift+m / m"
command = "vsc-labeled-bookmarks.toggleBookmark"

[[bind]]
path = "edit.util"
name = "mark"
combinedName = "add mark / mark..."
description = "bookmark related commands"
key = "z m"
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "mark ↓"
description = "move to next bookmark"
combinedName = "mark ↓/↑"
combinedDescription = "move to next/previous bookmark"
combinedKey = "j/k"
key = "z m j"
when = "!master-key.select_on && !editorHasSelection"
command = "vsc-labeled-bookmarks.navigateToNextBookmark"

[[bind]]
path = "edit.util"
combinedName = "mark ↓/↑"
key = "z m j"
when = "master-key.select_on || editorHasSelection"
command = "vsc-labeled-bookmarks.expandSelectionToNextBookmark"

[[bind]]
path = "edit.util"
name = "mark ↑"
combinedName = "mark ↓/↑"
description = "move to previous bookmark"
key = "z m k"
when = "!master-key.select_on && !editorHasSelection"
command = "vsc-labeled-bookmarks.navigateToPreviousBookmark"

[[bind]]
path = "edit.util"
name = "mark ↑"
combinedName = "mark ↓/↑"
description = "move to previous bookmark"
key = "z m k"
when = "master-key.select_on || editorHasSelection"
command = "runCommands"
args.commands = ["vsc-labeled-bookmarks.expandSelectionToPreviousBookmark",
      "selection-utilities.activeAtStart"]

[[bind]]
path = "edit.util"
name = "remove mark"
description = "remove bookmark (use quick selection)"
key = "z m d"
command = "vsc-labeled-bookmarks.deleteBookmark"

[[bind]]
path = "edit.util"
name = "nav marks"
description = "reveal quick selection to move to a bookmark"
key = "z m t"
command = "vsc-labeled-bookmarks.navigateToBookmark"

[[bind]]
path = "edit.util"
name = "error →"
combinedName = "error →/←"
combinedDescription = "move to next/previous error"
combinedKey = "e/shift+e"
description = """
move to next error
"""
key = "z e"
command = "editor.action.marker.next"

[[bind]]
path = "edit.motion"
name = "error ←"
combinedName = "error →/←"
description = """
move to previous error
"""
key = "z shift+e"
command = "editor.action.marker.prev"

[[bind]]
path = "edit.motion"
name = "diff →"
combinedName = "diff →/←"
combinedDescription = "move to and show next/previous diff"
combinedKey = "c/shift+c"
description = """
move to and show next diff
"""
key = "z c"
command = "editor.action.dirtydiff.next"

[[bind]]
path = "edit.motion"
name = "diff ←"
combinedName = "diff →/←"
description = """
move to and show previous diff
"""
key = "z shift+c"
command = "editor.action.dirtydiff.previous"

[[bind]]
path = "edit.motion"
name = "change →"
combinedName = "change →/←"
combinedDescription = "move to next/previous file change"
combinedKey = "d/shift+d"
description = """
move to next file change
"""
key = "z d"
command = "workbench.action.editor.nextChange"

[[bind]]
path = "edit.motion"
name = "change ←"
combinedName = "change →/←"
description = """
move to previous change
"""
key = "z shift+d"
command = "workbench.action.editor.previousChange"

## Window manipulation
## --------------------------------

[[path]]
id = "window"
name = "Window Manipulation"
description = "Commands for navigating and manipulating the window/editor panes in some way"
default.kind = "util"
default.mode = "normal"
when = "editorTextFocus && !findWidgetVisible"

[[bind]]
path = "window"
name = "cntr win"
description = "center window at primary cursor position"
key = "z z"
command = "selection-utilities.revealActive"
args.at = "center"
when = "editorTextFocus"

[[bind]]
path = "edit.util"
name = "window"
description = "window/editor pane manipulation-related commands"
key = "z w"
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "vert/horz"
key = "z w r"
description = "Toggle between horizontal and vertical layouts"
command = "workbench.action.toggleEditorGroupLayout"

[[bind]]
path = "edit.util"
name = "nav →"
combinedName = "nav →/←"
combinedDescription = "move focus to the right/left"
combinedKey = "l/h"
description = "move focus to window to the right"
key = "z w l"
command = "workbench.action.focusRightGroup"

[[bind]]
path = "edit.util"
name = "nav ←"
combinedName = "nav →/←"
description = "move focus to window to the left"
key = "z w h"
command = "workbench.action.focusLeftGroup"

[[bind]]
path = "edit.util"
name = "nav ↑"
combinedName = "nav ↑/↓"
combinedDescription = "move focus to window above/below"
combinedKey = "k/j"
description = "move focus to window above"
key = "z w k"
command = "workbench.action.focusAboveGroup"

[[bind]]
path = "edit.util"
name = "nav ↓"
combinedName = "nav ↑/↓"
description = "move focus to window below"
key = "z w j"
command = "workbench.action.focusBelowGroup"

[[bind]]
path = "edit.util"
name = "move →"
combinedName = "move →/←"
combinedDescription = "move editor to window left/right"
combinedKey = "shift+l/h"
description = "move editor to window to left"
key = "z w shift+l"
command = "workbench.action.moveEditorToRightGroup"

[[bind]]
path = "edit.util"
name = "←"
combinedName = "move →/←"
description = "move editor to window to left"
key = "z w shift+h"
command = "workbench.action.moveEditorToLeftGroup"

[[bind]]
path = "edit.util"
name = "↓"
combinedName = "move ↓/↑"
combinedDescription = "move editor to window above/below"
combinedKey = "shift+j/k"
description = "move editor to window below"
key = "z w shift+j"
command = "workbench.action.moveEditorToBelowGroup"

[[bind]]
path = "edit.util"
name = "↑"
combinedName = "move ↓/↑"
description = "move editor to window above"
key = "z w shift+k"
command = "workbench.action.splitEditorUp"

[[bind]]
path = "edit.util"
name = "split editor..."
description = "split editor to in a given direction"
key = "z w s"
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "move →"
combinedName = "split →/←"
combinedDescription = "move editor to window left/right"
combinedKey = "l/h"
description = "split editor to window to left"
key = "z w s l"
command = "workbench.action.splitEditorRight"

[[bind]]
path = "edit.util"
name = "←"
combinedName = "split →/←"
description = "split editor to window to left"
key = "z w s h"
command = "workbench.action.splitEditorLeft"

[[bind]]
path = "edit.util"
name = "↓"
combinedName = "split ↓/↑"
combinedDescription = "split editor to window above/below"
combinedKey = "j/k"
description = "split editor to window below"
key = "z w s j"
command = "workbench.action.splitEditorDown"

[[bind]]
path = "edit.util"
name = "↑"
combinedName = "split ↓/↑"
combinedDescription = "split editor to window above/below"
combinedKey = "j/k"
description = "split editor to window below"
key = "z w s k"
command = "workbench.action.splitEditorUp"

[[bind]]
path = "edit.util"
name = "close pane"
description = "close the given group of editors"
key = "z w x"
command = "workbench.action.closeEditorsInGroup"

[[bind]]
path = "edit.util"
name = "max"
description = "minimize size of all other windows"
key = "z w shift+m"
command = "workbench.action.minimizeOtherEditors"

[[bind]]
path = "edit.util"
name = "equal"
description = "equalzize size of all windows"
key = "z w ="
command = "workbench.action.evenEditorWidths"

[[bind]]
path = "edit.util"
name = "curs. win top"
description = "center window so that primary cursor is at the top"
key = "z w t"
combinedName = "center window top/bottom"
combinedDescription = "center window so that primary cursor is at the top/bottom"
combinedKey = "t/b"
command = "selection-utilities.revealActive"
args.at = "top"

[[bind]]
path = "edit.util"
name = "curs. win bot"
combinedName = "center window top/bottom"
description = "center window so that primary cursor is at the bottom"
key = "z w b"
command = "selection-utilities.revealActive"
args.at = "bottom"

## Debugging
## --------------------------------

[[bind]]
path = "edit.util"
name = "breakpt."
combinedName = "breakpt / debug..."
combinedKey = "shift+b/b"
description = "toggle debug breakpoint"
combinedDescription = "toggle debug breakpoint / debug related commands..."
key = "z shift+b"
command = "editor.debug.action.toggleBreakpoint"

[[bind]]
path = "edit.util"
name = "debug..."
combinedName = "breakpt / debug..."
description = "assorted debugging actions"
key = "z b"
command = "master-key.prefix"

[[bind]]
path = "edit.util"
name = "cond. break"
description = "conditional breakpoint"
key = "z b shift+c"
command = "editor.debug.action.conditionalBreakpoint"


[[bind]]
path = "edit.util"
name = "start"
description = "start debugging"
key = "z b r"
command = "workbench.action.debug.start"

[[bind]]
path = "edit.util"
name = "continue"
description = "continue debugging"
key = "z b c"
command = "workbench.action.debug.continue"

[[bind]]
path = "edit.util"
name = "next"
description = "debug: step over next line"
key = "z b j"
command = "workbench.action.debug.stepOver"

[[bind]]
path = "edit.util"
name = "into"
description = "debug: step into next line"
key = "z b i"
command = "workbench.action.debug.stepInto"

[[bind]]
path = "edit.util"
name = "out"
description = "debug: step out"
key = "z b o"
command = "workbench.action.debug.stepOut"

## Select-edit mode
## --------------------------------

[[path]]
id = "edit.select_edit"
name = "Selection Editing"
description = "Various kakaune inspired commands for editing multiple selections"
default.mode = "selectedit"
default.kind = "motion"

[[bind]]
path = "edit.select_edit"
name = "select-edit"
description = """
Enter a mode where you can edit and manipulate (possibly multiple) selections.
"""
key = "'"
command = "master-key.setMode"
args.value = "selectedit"
mode = "normal"

[[bind]]
path = "edit.select_edit"
key = "shift+'"
name = "del. cursors"
description = "Delete all selections and return to normal"
command = "runCommands"
args.commands = ["selection-utilities.cancelSelection", "master-key.enterNormal"]
mode = ["selectedit", "normal"]

[[bind]]
path = "edit.select_edit"
name = 'normal'
description = "return to normal mode"
key = "'"
command = "master-key.enterNormal"

[[bind]]
path = "edit.select_edit"
name = "add →"
combinedName = "add →/←"
description = "add cursor at the next match to the primary cursor's text"
combinedDescription = "add cursor at the next/previous match to the primary cursor's text"
key = "l"
combinedKey = "l/h"
repeat = "count"
command = "selection-utilities.addNext"

[[bind]]
path = "edit.select_edit"
name = "add ←"
combinedName = "add →/←"
description = "add cursor at the previous match to the primary cursor's text"
key = "h"
command = "selection-utilities.addPrev"
repeat = 'count'

[[bind]]
path = "edit.select_edit"
name = "skip →"
combinedName = "skip →/←"
description = "move primary cursor to the next match of the primary cursor's text"
combinedDescription = "move primary cursor to the next/previous match of the primary cursor's text"
key = "shift+l"
combinedKey = "shift+l/h"
command = "selection-utilities.skipNext"
repeat = "count"

[[bind]]
path = "edit.select_edit"
name = "skip ←"
combinedName = "skip →/←"
description = "move primary cursor to the previous match of the primary cursor's text"
key = "shift+h"
command = "selection-utilities.skipPrev"
repeat = 'count'

[[bind]]
path = "edit.select_edit"
name = "align ←"
description = "align selections left"
key = "="
command = "selection-utilities.alignSelectionsLeft"

[[bind]]
path = "edit.select_edit"
name = "align →"
description = "align selections right"
key = "shift+="
command = "selection-utilities.alignSelectionsRight"

[[bind]]
path = "edit.select_edit"
name = "→ sel"
combinedName = "→/← sel"
description = """
make the next selection primary; primary selections determine from where you add cursors,
what cursor you delete, and where the cursor goes when you clear or save selections
"""
combinedDescription = """
make the next/previous selection primary; primary selections determine from where you add cursors,
what cursor you delete, and where the cursor goes when you clear or save selections
"""
key = "j"
combinedKey = "j/l"
command = "selection-utilities.movePrimaryRight"
repeat = 'count'

[[bind]]
path = "edit.select_edit"
name = "← sel"
combinedName = "→/← sel"
description = "make the previous selection primary; primary selections determine from where you add cursors, what cursor you delete, and where the cursor goes when you clear or save selections"
key = "k"
command = "selection-utilities.movePrimaryLeft"
repeat = 'count'

[[bind]]
path = "edit.select_edit"
name = "insert ↑"
combinedName = "insert ↑/↓"
description = """
insert cursor on line above
"""
combinedDescription = "insert cursor on line above/below"
key = "shift+k"
combinedKey = "shift+k/j"
command = "runCommands"
repeat = "count"
args.commands = [
      { command = "master-key.setMode", args = { value = "selectedit" } },
      { command = "editor.action.insertCursorAbove" }
]

[[bind]]
path = "edit.select_edit"
name = "insert sel ↓"
combinedName = "insert ↑/↓"
description = """
insert cursor on line below
"""
key = "shift+j"
command = "runCommands"
repeat = "count"
args.commands = [
      { command = "master-key.setMode", args = { value = "selectedit" }},
      { command = "editor.action.insertCursorBelow" }
]

[[bind]]
path = "edit.select_edit"
name = "del. primary"
combinedName = "del. primary/others"
description = "remove the primary selection"
combinedDescription = """
Remove either the primary selection or all selections. Return to normal
mode if all selections are deleted.
"""
key = "d"
command = "selection-utilities.deletePrimary"
repeat = 'count'

[[bind]]
path = "edit.select_edit"
name = 'del. others'
description = "delete all other cursors but the primary selection"
key = "shift+d"
command = "removeSecondaryCursors"

[[bind]]
path = "edit.select_edit"
name = "save sel"
description = """
save all selections to the default register.
Use a count to specify an alternate register
"""
key = "c"
command = "runCommands"
args.commands = [
      { command = "selection-utilities.appendToMemory", computedArgs = { register = "count || 'default'" } },
      "selection-utilities.shrinkToActive", "master-key.enterNormal"
]

[[bind]]
path = "edit.select_edit"
name = "load sel"
description = """
load previously saved selections in the default register.
Use a count to specify an alternate register
"""
key = "v"
command = "runCommands"
args.commands = [
      { command = "selection-utilities.restoreAndClear", computedArgs = { register = "count || 'default'" } },
]

[[bind]]
path = "edit.select_edit"
name = "exchange sel"
description = """
exchange selections: with no saved selection, saves the selection, with saved selections exchanges text of current selections with those of the saved selections (number of selections must match). Use a count to specify an alternate register.
"""
key = "x"
command = "runCommands"
args.commands = [
      { command = "selection-utilities.swapWithMemory", computedArgs = {register = "count || 'default'"} },
      "master-key.enterNormal"
]

[[bind]]
path = "edit.select_edit"
name = "rem saved sel"
description = """
remove the most recently saved selection from the list of saved selections
"""
command = "runCommands"
key = "n"
args.commands = [
      { command = "selection-utilities.deleteLastSaved", computedArgs = {register = "count || 'default'"} },
      "master-key.enterNormal"
]

[[bind]]
path = "edit.select_edit"
key = "shift+enter"
name = "split sel"
description = """
split selection into multiple selections by new line charactesr
"""
command = "selection-utilities.splitByNewline"

[[bind]]
path = "edit.select_edit"
name = "sel all"
description = """
create a selection for every match of the current word (or selection)
"""
key = "shift+8"
command = "editor.action.selectHighlights"

[[bind]]
path = "edit.select_edit"
name = "character"
description = "split by a given character"
key = "s"
command = "runCommands"

[[bind.args.commands]]
command = "master-key.captureKeys"
args.acceptAfter = 1

[[bind.args.commands]]
command = "selection-utilities.splitBy"
computedArgs.text = "captured"

[[bind]]
path = "edit.select_edit"
name = "string"
description = "split by a given string"
key = "shift+s"
command = "selection-utilities.splitBy"

[[bind]]
path = "edit.select_edit"
name = "include"
description = """
Include all selections that contain a given marker
"""
key = "f"
command = "selection-utilities.includeBy"

[[bind]]
path = "edit.select_edit"
name = "exclude"
description = """
Exclude all selections that contain a given marker
"""
key = "shift+f"
command = "selection-utilities.excludeBy"

[[bind]]
path = "edit.select_edit"
name = "create"
description = "create selections of given string scoped to the current selections"
key = "/"
command = "selection-utilities.createBy"

[[bind]]
path = "edit.select_edit"
name = "regex"
description = "operations by regex rather than string"
key = "r"
command = "master-key.prefix"

[[bind]]
path = "edit.select_edit"
name = "split"
description = "split by a given regular expression"
key = "r shift+s"
command = "selection-utilities.splitByRegex"

[[bind]]
path = "edit.select_edit"
name = "create"
description = "create selections of given regular expression scoped to the current selections"
key = "r /"
command = "selection-utilities.createByRegex"

[[bind]]
path = "edit.select_edit"
name = "include"
description = "Include all selections that contain a given regular expression"
key = "r f"
command = "selection-utilities.includeByRegex"

[[bind]]
path = "edit.select_edit"
name = "exclude"
description = "Exclude all selections that contain a given regular expression"
key = "r shift+f"
command = "selection-utilities.excludeByRegex"

[[bind]]
path = "edit.select_edit"
key = "o"
name = "active to front"
combinedName = "active to start/end"
combinedDescription = "move cursor to start/end of selection"
description = "move cursor to start of selection"
command = "selection-utilities.activeAtEnd"

[[bind]]
path = "edit.select_edit"
name = "active to end"
combinedName = "active to start/end"
description = "move cursor to back of selection"
key = "shift+o"
command = "selection-utilities.activeAtStart"

## Symmetric Insert Mode
## --------------------------------

[[path]]
id = "edit.action.symmetric"
name = "Symmetric Operations"
description = "Operations that occur at both ends of a selection"
default.kind = "motion"
default.mode = "syminsert"

[[bind]]
path = "edit.action.symmetric"
name = "sym insert mode"
priority = 1
description = """
In this mode all commands and character insertions happen at both ends of
the selection
"""
mode = "normal"
key = "space shift+i"
combinedName = "sym insert (mode)"
command = "master-key.setMode"
args.value = "syminsert"

[[bind]]
path = "edit.action.symmetric"
name = "Normal"
description = "Return to normal model"
key = ["enter"]
command = "master-key.setMode"
mode = "syminsert"

[define.symmetric_key_map]
"shift+;" = ":"
"shift+'" = "\""
"shift+/" = "?"
"shift+\\" = "|"
"shift+=" = "+"
"shift+-" = "-"
"shift+8" = "*"
"shift+7" = "&"
"shift+6" = "^"
"shift+5" = "%"
"shift+4" = "$"
"shift+3" = "#"
"shift+2" = "@"
"shift+1" = "!"
"shift+`" = "~"
";" = ";"
"'" = "'"
"," = ","
"." = "."
"/" = "/"
"=" = "="
"-" = "-"
"`" = "`"

[[bind]]
path = "edit.action.symmetric"
key = [
      "shift+;",
      ";",
      "'",
      "shift+'",
      ",",
      ".",
      "/",
      "shift+/",
      "shift+\\",
      "=",
      "shift+=",
      "-",
      "shift+-",
      "shift+8",
      "shift+7",
      "shift+6",
      "shift+5",
      "shift+4",
      "shift+3",
      "shift+2",
      "shift+1",
      "shift+`",
      "`",
]
description = "Insert the character {symmetric_key_map[key]} at both ends of each selection"
command = "selection-utilities.insertAround"
args = { before = "{symmetric_key_map[key]}", after = "{symmetric_key_map[key]}" }
