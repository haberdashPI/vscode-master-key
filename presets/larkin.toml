[header]
version = "1.0"
requiredExtensions = [
      "dbankier.vscode-quick-select",
      "haberdashPI.vscode-select-by-indent",
      "haberdashPI.selection-utilities",
      "haberdashPI.move-cursor-by-argument",
      "pustelto.bracketeer",
      "wmaurer.change-case",
      "pranshuagrawal.toggle-case",
      "albymor.increment-selection",
      "pkief.markdown-checkbox",
      "edgardmessias.clipboard-manager",
      "stkb.rewrap",
      "haberdashPI.terminal-polyglot",
      "jack89ita.open-file-from-path",
      "koalamer.labeled-bookmarks",
]

[bind]
name = "Larkin Key Bindings"
description = """
This set of keybindings provides a comprehensive and well tested set of
bindings that I use in my daily work. It serves as an example of a fully
customized set of keybindings, and demonstrates the full capabilities of
master-key.

The basic logic of these commands follow that of Kakoune: motions generally
cause some region of text to be selected, and then actions modify these
selections. This is the inverse of vim's motions (`wd` instead of `dw`). This
integrates well with many of the existing VSCode extensions which operate on
selections. 

These bindings are named after the middle name of my first child.
"""

[define]
validModes = ["insert", "search", "normal", "syminsert", "selectedit"]
select_on = false
around_on = false

[[define.selectLinesDown]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesDown]]
command = "cursorMove"
args = { to = "down", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[define.selectLinesDown]]
command = "expandLineSelection"

[[define.selectLinesUp]]
command = "selection-utilities.shrinkToActive"

[[define.selectLinesUp]]
command = "cursorMove"
args = { to = "up", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[define.selectLinesUp]]
command = "expandLineSelection"


[bind.modes]
name = "Modes"
description = """
Larkin uses different modes (like vim). Insert is the default and it 
works the same way VSCode normally does. Upon hitting escape you enter normal
mode, wherein a variety of behaviors are available to move around and manipulate the
text.

Refer to the actions section for the various ways you can exit normal mode and
return to insert mode.

**TODO**: document the other modes
"""
default.kind = "mode"

[[bind.modes.items]]
name = "normal"
description = "Enter normal mode"
key = ["escape", "ctrl+["]
do = ["master-key.enterNormal", "master-key.reset"]
when = "!findWidgetVisible"
prefixes = "<all-prefixes>"

[[bind.modes.items]]
key = ["escape", "ctrl+["]
when = "suggsetWidgetVisible && editorTextFocus && !findWidgetVisible"
do = ["master-key.enterNormal", "master-key.reset"]
prefixes = "<all-prefixes>"

[[bind.modes.items]]
# by default typing keys in a mode other than insert is simply ignored
name = "ignore"
description = "this key does nothing"
key = ["<all-keys>", "shift+<all-keys>"]
do.command = "master-key.ignore"
prefixes = "<all-prefixes>"
mode = ["!insert", "!search"]
when = "editorTextFocus"

[bind.edit]
name = "Editor Commands"
description = """
Most commands are editing commands, they interact with the text editor, either by
selecting text in the editor, moving around it, manipulating text in the editor, and
so forth.
"""
default.when = "editorTextFocus && !findWidgetVisible"

[bind.edit.count]
name = "count"
description = """
The number keys are used to update the count, which affects how many times the next 
command is repeated, when relevant.
"""

[[bind.edit.count.items]]
name = "Update number with {key}"
key = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
do.command = "master-key.updateCount"
do.args.value = "{key}"
resetTransient = false
mode = "!insert"                                         # number keys apply in all modes but insert

[bind.edit.motion]
name = "Motions"
description = "Commands that move the cursors and/or selections"
default.kind = "select"
default.mode = "normal"

[bind.edit.motion.prim]
name = "Primitive Motions"
description = "Motions fundamental to moving around in the editor."
default.do.command = "cursorMove"
default.do.computedArgs.value = "count"
default.do.computedArgs.around = "around_on"
default.do.computedArgs.select = "select_on"

[[bind.edit.motion.prim.items]]
key = "h"
name = "←"
description = "move left"
do.args.to = "left"

[[bind.edit.motion.prim.items]]
key = "j"
name = "↓"
description = "move down"
do.args.to = "down"

[[bind.edit.motion.prim.items]]
key = "k"
name = "↑"
description = "move up"
do.args.to = "up"

[[bind.edit.motion.prim.items]]
key = "l"
name = "→"
description = "move right"
do.args.to = "right"

[[bind.edit.motion.prim.items]]
key = "g j"
name = "unwrp ↓"
description = "down unwrapped line"
do.args.to = "down"
do.args.by = "line"

[[bind.edit.motion.prim.items]]
key = "g k"
name = "unwrp ↑"
description = "up unwrapped line"
do.args.to = "down"
do.args.by = "line"

[[bind.edit.motion.prim.items]]
key = "shift+h"
name = "start"
description = "start of line (alternates between first non-white and first)"
do = "cursorHomeSelect"

[[bind.edit.motion.prim.items]]
key = "shift+l"
name = "end"
description = "end of line"
do.command = "cursorMove"
do.args.to = "wrappedLineEnd"
do.args.select = true

[[bind.edit.motion.prim.items]]
key = "shift+g"
name = "exapnd"
description = "expand selections to full lines"
do = "expandLineSelection"

[[bind.edit.motion.prim.items]]
key = "shift+k"
name = "sel ↑"
description = "select lines upwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "up", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items.do]]
command = "expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "shift+j"
name = "sel ↓"
description = "select lines downwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "down", by = "wrappedLine", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items.do]]
command = "expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "g shift+k"
name = "unwrp sel ↑"
description = "select unwrapped lines upwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "up", by = "line", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items.do]]
command = "expandLineSelections"

[[bind.edit.motion.prim.items]]
key = "g shift+j"
name = "sel ↓"
description = "select unwrapped lines downwards"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "down", by = "line", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items.do]]
command = "expandLineSelections"

[[bind.edit.motion.prim.items]]
key = '\'
name = "→ sel"
description = "select *just* the character to the right"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "right", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items]]
key = 'shift+\'
name = "← sel"
description = "select *just* the character to the left"

[[bind.edit.motion.prim.items.do]]
command = "selection-utilities.shrinkToActive"

[[bind.edit.motion.prim.items.do]]
command = "cursorMove"
args = { to = "left", select = true }
computedArgs = { value = "count" }

[[bind.edit.motion.prim.items]]
key = "g shift+g"
name = "doc end"
description = "select to end of document"
do = "cursorBottomSelect"

[[bind.edit.motion.prim.items]]
key = "g g"
name = "doc start"
description = "select to start of document"
do = "cursorTopSelect"

[bind.edit.motion.mod]
name = "Modify Motion Effects"
description = "Keys that change how other motions work"
default.kind = "select"

[[bind.edit.motion.mod.items]]
key = "u"
name = "around"
description = """
selection commands are changed to both move start and end of a selection to surround the 
entire object (rather than extending to specified start/end point)
"""
kind = "prefix"
resetTransient = false
do.command = "master-key.prefix"
do.args = { key = "u", flag = "around_on" }

[[bind.edit.motion.mod.items]]
key = "shift+space"
name = "hold selection"
description = """
selection commands extend the selection
"""
do.command = "master-key.set"
do.args.name = "select_on"
do.args.value = true

[[bind.edit.motion.mod.items]]
key = "space"
name = "shrink selection"
mode = ["normal", "selectedit"]
description = """
reduce all selections to length zero
"""
do = [
      "selection-utilities.shrinkToActive",
      { command = "master-key.set", args = { name = "select_on", value = false } },
]

[bind.edit.motion.obj]
name = "Motions around various regex-like objects"
description = """
selection commands that move by a predefined syntactic object (e.g. word, paragraph, etc...)
"""
default.do.command = "selection-utilities.moveBy"
default.do.args.boundary = "start"
default.prefixes = ["", "u"]
default.do.args.select = "!around_on"
default.do.computedArgs.selectWhole = "around_on"

[[bind.edit.motion.obj.items]]
key = "w"
name = "subwrd →"
description = "next subword (camel/snake case)"
do.args.unit = "subword"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "e"
name = "subwrd end"
description = "next subword (camel/snake case) end"
do.args.unit = "subword"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+w"
name = "word →"
description = "next word"
do.args.unit = "word"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+e"
name = "word end"
description = "next word end"
do.args.unit = "word"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "b"
name = "subwrd ←"
description = "previous subword (camel/snake case)"
do.args.unit = "subword"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "shift+b"
name = "word ←"
description = "previous word"
do.args.unit = "word"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "' w"
name = "WORD →"
description = "next WORD; e.g. contiguous non-whitespace region"
do.args.unit = "WORD"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "' b"
name = "WORD ←"
description = "previous WORD; e.g. contiguous non-whitespace region"
do.args.unit = "WORD"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "' e"
name = "WORD end →"
description = "next WORD end; e.g. contiguous non-whitespace region"
do.args.unit = "WORD"
do.computedArgs.boundary = "around_on ? 'both' : 'end'"
do.computedArgs.value = "-count || -1"

[[bind.edit.motion.obj.items]]
key = "shift+2"
name = "number ←"
description = "previous number"
do.args.unit = "integer"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = "shift+3"
name = "number →"
description = "next number"
do.args.unit = "integer"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = "' ;"
name = "comment ←"
description = "previous comment"
do.args.unit = "comment"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = "' shift+;"
name = "comment →"
description = "next comment"
do.args.unit = "comment"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = ", ;"
name = "blk cmnt ←"
description = "previous block comment"
do.args.unit = "block_comment"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = ", shift+;"
name = "blk cmnt →"
description = "next block comment"
do.args.unit = "block_comment"
do.args.boundary = "both"
do.args.selectWhole = true
do.computedArgs = { value = "-(count || 1)" }

[[bind.edit.motion.obj.items]]
key = "p"
name = "paragraph →"
description = "next paragraph"
do.args.unit = "paragraph"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+p"
name = "paragraph ←"
description = "previous paragraph"
do.args.unit = "paragraph"
do.computedArgs.value = "-(count || 1)"

[[bind.edit.motion.obj.items]]
key = "shift+0"
name = "subsec →"
description = "next subsection"
do.args.unit = "subsection"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "shift+p"
name = "subsec ←"
description = "previous subsection"
do.args.unit = "subsection"
do.computedArgs.value = "-(count || 1)"

[[bind.edit.motion.obj.items]]
key = "' shift+0"
name = "sec →"
description = "next seciont"
do.args.unit = "section"
do.computedArgs.value = "count || 1"

[[bind.edit.motion.obj.items]]
key = "' shift+p"
name = "sec ←"
description = "previous seciont"
do.args.unit = "section"
do.computedArgs.value = "-(count || 1)"

# TODO: add various iterations of notebook cell navigation

[[bind.edit.motion.obj.items]]
key = "shift+4"
name = "all"
description = "Select entire document"
do = "editor.action.selectAll"

[[bind.edit.motion.obj.items]]
key = "u u"
name = "smart expand"
description = "Use VSCode's built-in smart expansion command"
do = "editor.action.smartSelect.expand"

[bind.edit.motion.search]
name = "Search Related Motions"
description = "Motions related to searching for text in a document"
default.do.command = "master-key.search"
default.do.args.caseSensitive = true
default.do.args.backwards = false
default.do.args.selectTillMatch = true
default.do.args.wrapAround = true

[[bind.edit.motion.search.items]]
key = "/"
name = "search"
description = "search forwards"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+/"
name = "search bk"
description = "search backwards"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "n"
name = "→ search"
description = "Go to the next match of the search query"
do.command = "master-key.nextMatch"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+n"
name = "← search"
description = "Go to the previous match of the search query"
do.command = "master-key.previousMatch"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+8"
name = "match →"
description = "Next match to object under curosr"
do.computedArgs.text = "firstSelectionOrWord"
do.args.register = "search"

[[bind.edit.motion.search.items]]
key = "shift+7"
name = "match ←"
description = "Previous match to object under curosr"
do.computedArgs.text = "firstSelectionOrWord"
do.args.register = "search"
do.args.backwards = true

[[bind.edit.motion.search.items]]
key = "f"
name = "find char"
description = "Find the next char (include char in selection)"
do.args.acceptAfter = 1
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "shift+f"
name = "find char back"
description = "Find the previous char (include char in selection)"
do.args.acceptAfter = 1
do.args.backwards = true
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "t"
name = "to char"
description = "Find the next char (exclude char in selection)"
do.args.acceptAfter = 1
do.args.offset = "start"
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "shift+t"
name = "to char back"
description = "Find the previous char (exclude char in selection)"
do.args.acceptAfter = 1
do.args.offset = "end"
do.args.backwards = true
do.computedArgs.skip = "count-1"

[[bind.edit.motion.search.items]]
key = "s"
name = "find char pair"
description = "To next character pair"
do.args.acceptAfter = 2
do.args.offset = "start"

[[bind.edit.motion.search.items]]
key = "shift+s"
name = "char pair back"
description = "To previous character pair"
do.args.acceptAfter = 2
do.args.offset = "start"

[[bind.edit.motion.search.items]]
key = ";"
name = "→ match"
description = "Repeat search motion forwards"
do.command = "master-key.nextMatch"
do.computedArgs.repeat = "count"

[[bind.edit.motion.search.items]]
key = "shift+;"
name = "← match"
description = "Repeat search motion backwards"
do.command = "master-key.previousMatch"
do.computedArgs.repeat = "count"

[bind.edit.motion.syntax]
name = "Motions around syntactic objects (e.g. parentheses and quotes)"
description = """
selection commands that move by a predefined syntactic object like brackets and quotes
"""

[[bind.edit.motion.syntax.items]]
key = "shift+["
name = "arnd parens"
description = "parens/brackets/braces and their contents"
do.command = "selection-utilities.expandAroundBrackets"

[[bind.edit.motion.syntax.items]]
key = "["
name = "in parens"
description = "text inside parens/brackets/braces"
do = "selection-utilities.expandInBrackets"

[[bind.edit.motion.syntax.items]]
key = "shift+5"
name = "to bracket"
description = "Move to matching bracket"
do = "editor.action.jumpToBracket"

[[bind.edit.motion.syntax.items]]
key = "' '"
name = "in quotes"
description = "text within current quotes"
do = "bracketeer.selectQuotesContent"

[[bind.edit.motion.syntax.items]]
key = "' '"
name = "around quotes"
description = "text around current quotes"
do = ["bracketeer.selectQuotesContent", "bracketeer.selectQuotesContent"]

[[bind.edit.motion.syntax.items]]
key = "' >"
name = "in <>"
description = "text inside angle brackets"
do = "extension.selectAngleBrackets"

[[bind.edit.motion.syntax.items]]
key = "' <"
name = "in ><"
description = "text inside tag pairs (e.g. <a>text</a>)"
do = "extension.selectInTag"

[[bind.edit.motion.syntax.items]]
key = "]"
name = "inside indent"
description = "all text at the same indentation level"
do = "vscode-select-by-indent.select-inner"

[[bind.edit.motion.syntax.items]]
key = "shift+]"
name = "around indent"
description = "all text at the same indentation level along with the line above and below this (ala c-like syntax)"
do = "vscode-select-by-indent.select-outer"

[[bind.edit.motion.syntax.items]]
key = "' ]"
name = "indent+top"
description = "all text at the same indentation level and the line just about it (ala python syntax)"
do = "vscode-select-by-indent.select-outer-top-only"

[[bind.edit.motion.adjust.items]]
key = "R"
name = "expand no wht"
description = "select full line(s), and trim external whitespace"
do = "selection-utilities.trimSelectionWhitespace"

[[bind.edit.motion.adjust.items]]
name = 'narrow to subword'
description = "Narrow current selection so it starts and stops at a subword (e.g. 'snake' in snake_case)"
do.command = "selection-utilities.narrowTo"
do.args.unit = "subident"
do.args.boundary = "both"

[bind.edit.action]
name = "Actions"
description = "Commands that modify the document or UI"
default.kind = "action"
default.mode = "normal"

[bind.edit.action.basic]
name = "Basic Actions"
description = "Essential actions required to edit text"

[[bind.edit.action.basic.items]]
# TODO: add documentation to these basic editor keys
key = "i"
name = "insert"
description = "Switch to insert mode (right before character)"
do = ["selection-utilities.shrinkToActive", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "a"
name = "append"
description = "Switch to insert mode (right after character)"
do = ["selection-utilities.shrinkToActive", "master-key.enterInsert"]
when = "editorHasSelection"

[[bind.edit.action.basic.items]]
key = "a"
do = [
      "selection-utilities.shrinkToActive",
      "cursorRight",
      "master-key.enterInsert",
]
when = "!editorHasSelection"

[[bind.edit.action.basic.items]]
key = "c"
name = "change"
description = """
Without a count: change selected region of text. With a count:
change up to `count` lines.
"""
when = "editorHasMultilineSelection"
do = ["deleteRight", "editor.action.insertLineBefore", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasMultilineSelection && editorHasSelection"
do = ["deleteRight", "master-key.enterInsert"]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasSelection && master-key.count <= 1"
do = [
      "expandLineSelection",
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind.edit.action.basic.items]]
key = "c"
when = "!editorHasSelection && master-key.count > 1"
do = [
      { defined = "selectLinesDown" },
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind.edit.action.basic.items]]
key = "shift+c"
name = "change to/back"
description = """Without a count: change from current char to end of line. With a count: 
change the previous `count` lines.
"""
when = "master-key.count <= 1"
do = [
      "selection-utilities.shrinkToActive",
      "deleteAllRight",
      "master-key.enterInsert",
]

[[bind.edit.action.basic.items]]
key = "shift+c"
when = "master-key.count > 1"
do = [
      { defined = "selectLinesUp" },
      "deleteRight",
      "editor.action.insertLineBefore",
      "master-key.enterInsert",
]

[[bind.edit.action.basic.items]]
key = "r"
name = "replace char"
description = "replace the character under the cursor"
do = "master-key.replaceChar"

[bind.edit.action.clipboard]
name = "Clipboard Operations"
description = "Operations that manipulate the clipboard in some way."

[[bind.edit.action.clipboard.items]]
key = "d"
name = "delete"
description = """
Without a count: delete selected text (and store to clipboard). With a 
count, delete up to the next `count` lines and store to clipboard.
"""
when = "!editorHasSelection"
do = [
      { defined = "selectLinesDown" },
      "editor.action.clipboardCutAction",
      { command = "master-key.enterMode", args = { value = "normal" } },
]

[[bind.edit.action.clipboard.items]]
key = "d"
when = "editorHasSelection"
do = [
      "editor.action.clipboardCutAction",
      { command = "master-key.enterMode", args = { value = "normal" } },
]

[[bind.edit.action.clipboard.items]]
key = "shift+d"
name = "without count: Delete from cursor to end of line; with count: Delete from current line up `count` number of keys."
do = [
      "selection-utilities.shrinkToActive",
      { command = "cursorMove", args = { to = "wrappedLineEnd", select = true} },
      "editor.action.clipboardCutAction"
]

[[bind.edit.action.clipboard.items]]
key = "shift+d"
when = "master-key.count > 1"
do = [{ defined = "selectLinesUp" }, "deleteRight"]

[[bind.edit.action.clipboared.items]]
key = "y"
name = "copy"
description = "copy selected text to clipboard"
do = ["editor.action.clipboardCopyAction", "selection-utilities.shrinkToActive"]

[[bind.edit.action.clipboared.items]]
key = "shift+y"
name = "copy (eol/up)" 
description = "without a count: copy to end of line; with a count: copy this and the previous N lines"
when = "master-key.count <= 1"
do = [
      "selection-utilities.shrinkToActive",
      { command = "cursorMove", args = { to = "wrappedLineEnd", select = true} },
      "editor.action.clipboardCopyAction",
      "editor.action.shrinkToActive"
]

[[bind.edit.action.clipboared.items]]
key = "shift+y"
when = "master-key.count > 1"
do = [
      { defined = "selectLinesUp" },
      "editor.action.clipboardCopyAction",
      "editor.action.shrinkToActive"
]

[[bind.edit.action.clipboared.items]]
key = "v"
name = "paste after"
description = "Paste the next after the cursor/selection"
when = "editorHasSelection"
do = ["selection-utilities.activeAtEnd", "selection-utilities.shrinkToActive", "editor.action.clipboardPasteAction"]

[[bind.edit.action.clipboared.items]]
key = "v"
when = "!editorHasSelection"
do = ["cursorRight", "editor.action.clipboardPasteAction"]

[[bind.edit.action.clipboared.items]]
key = "shift+v"
name = "paste before"
description = "Paste before the cursor/selection"
when = "editorHasSelection"
do = ["selection-utilities.activeAtStart", "selection-utilities.shrinkToActive", "editor.action.clipboardPasteAction"]

[[bind.edit.action.clipboared.items]]
key = "shift+v"
when = "!editorHasSelection"
do = ["cursorRight", "editor.action.clipboardPasteAction"]

[[bind.edit.action.clipboared.items]]
name = "paste after line"
description = "Paste text after current line"
key = ", v"
do = [
      "expandLineSelection",
      "selection-utilities.activeAtEnd",
      "selection-utilities.shrinkToActive",
      "editor.action.clipboardPasteAction",
]

[[bind.edit.action.clipboared.items]]
name = "paste before line"
description = "Paste text before current line"
key = ", V"
do = [
      "expandLineSelection",
      "selection-utilities.activeAtStart",
      "selection-utilities.shrinkToActive",
      "editor.action.clipboardPasteAction",
]

[bind.edit.action.open_lines]
name = "Line opening actions"
description = """
These commands provides several ways of adding lines above or below the current line
"""

[[bind.edit.action.open_lines.items]]
name = "open, act →"
description = "without selection: open a line below current line and enter insert, with seleciton: move cursort to start"
key = "o"
mode = ["normal", "selectedit"]
when = "!editorHasSelection"
do = ["editor.action.insertLineAfter", "modalkeys.enterInsert"]

[[bind.edit.action.open_lines.items]]
key = "o"
mode = ["normal", "selectedit"]
when = "editorHasSelection"
do = "selection-utilities.activeAtEnd"

[[bind.edit.action.open_lines.items]]
name = "add line below"
description = "open a line below current line"
key = "g o"
do = "editor.action.insertLineAfter"

[[bind.edit.action.open_lines.items]]
name = "open blw, act ←"
description = "without selection: open a line above current line and enter insert, with selection: move cursor to end"
key = "shift+o"
when = "!editorHasSelection"
mode = ["normal", "selectedit"]
do = [ "editor.action.insertLineBefore", "modalkeys.enterInsert" ]

[[bind.edit.action.open_lines.items]]
name = "open blw, act ←"
description = "without selection: open a line above current line and enter insert, with selection: move cursor to end"
key = "shift+o"
mode = ["normal", "selectedit"]
when = "editorHasSelection"
do = "selection-utilities.activeAtStart"

[[bind.edit.action.open_lines.items]]
name = "open above"
description = "open a line above current line"
key = "g shift+o"
do = "editor.action.insertLineBefore"

[bind.edit.action.indent]
name = "Indentation"
description = """
Operations that affect line indentation
"""

[[bind.edit.action.indent.items]]
key = "shift+."
name = "indent"
description = "Indent lines"
do = [
      { defined = "selectLinesDown" },
      "editor.action.indentLines", 
      "modalkeys.cancelMultipleSelections"
]

[[bind.edit.action.indent.items]]
key = "shift+,"
name = "deindent"
description = "Deindent lines"
do = [
      { defined = "selectLinesDown" },
      "editor.action.outdentLines", 
      "modalkeys.cancelMultipleSelections"
]

[[bind.edit.action.indent.items]]
key = "g /"
name = "format"
description = "Format code"
do = [
      { defined = "selectLinesDown" },
      "editor.action.formatSelection",
      "modalkeys.cancelMultipleSelections"
]

[bind.edit.action.comment]
name = "Comments"
description = """
Operations that modify comments
"""

[[bind.edit.action.comment.items]]
key = "g ;"
name = "comment →"
description = "select next comment"
do = [
      { defined = "selectLinesDown" },
      "editor.action.commentLine", 
      "modalkeys.cancelMultipleSelections",
]

[[bind.edit.action.comment.items]]
key = "g shift+;"
name = "comment ←"
description = "select previous comment"
do = [
      { defined = "selectLinesDown" },
      "editor.action.blockComment", 
      "modalkeys.cancelMultipleSelections",
]

[[bind.edit.action.comment.items]]
key = "g q"
name = "wrap"
description = "wrap text, preserving commenting"
do = "rewrap.rewrapComment"

[bind.edit.terminal]
name = "Terminal Actions"
description = "Commands that send text from the editor to the terminal"
default.kind = "action"

[[bind.edit.terminal.items]]
name = "to repl"
description = """
send text to a terminal (usually containing a REPL); use language 
specific extensions when available and put the pasted code into a block (when defined)."
"""
key = "m"
when = "languageId == 'julia' && !editorHasSelection"
do = [
      { defined = "selectLinesDown" },
      "expandLineSelection", "selection-utilities.trimSelectionWhitespace", 
      "language-julia.executeCodeBlockOrSelectionAndMove"
]

[[bind.edit.terminal.items]]
key = "m"
when = "languageId == 'julia' && editorHasSelection"
do = "language-julia.executeCodeBlockOrSelectionAndMove"

[[bind.edit.terminal.items]]
key = "m"
when = "!(master-key.firstSelectionOrWord =~ /\n/)"
do = ["terminal-polyglot.send-text",
      "selection-utilities.shrinkToActive"]

[[bind.edit.terminal.items]]
key = "m"
when = "master-key.firstSelectionOrWord =~ /\n/"
do = ["terminal-polyglot.send-block-text",
      "selection-utilities.shrinkToActive"]

[[bind.edit.terminal.items]]
key = "shift+m"
name = "to repl (v2)"
description = """
send text to a terminal (usually containing a REPL), placing in a block when defined.
"""
when = "master-key.firstSelectionOrWord =~ /\n/"
do = ["terminal-polyglot.send-block-text", "modalkeys.cancelMultipleSelections"]

[[bind.edit.terminal.items]]
key = "shift+m"
name = "to repl (v2)"
description = """
send text to a terminal (usually containing a REPL), placing in a block when defined.
"""
when = "!(master-key.firstSelectionOrWord =~ /\n/)"
do = ["terminal-polyglot.send-text", "modalkeys.cancelMultipleSelections"]

[[bind.edit.terminal.items]]
key = "g m"
name = "to repl (v3)"
description = """
send text to a terminal (usually containing a REPL)
"""
do = ["terminal-polyglot.send-text", "modalkeys.cancelMultipleSelections"]

## TODO: add git/version control commands

[bind.edit.navigation]
name = "Document Navigation"
default.kind = "select"
description = """
Commands that navigate to various places in a document
"""

[[bind.edit.navigation.items]]
name = "error →"
description = """
move to next error
"""
key = ", e"
do = "editor.action.marker.next"

[[bind.edit.navigation.items]]
name = "error ←"
description = """
move to previous error
"""
key = ", shift+e"
do = "editor.action.marker.prev"

[[bind.edit.navigation.items]]
name = "diff →"
description = """
move to and show next change
"""
key = ", d"
do = "editor.action.dirtydiff.next"

[[bind.edit.navigation.items]]
name = "diff ←"
description = """
move to and show previous change
"""
key = ", shift+d"
do = "editor.action.dirtydiff.previous"

[[bind.edit.navigation.items]]
name = "change →"
description = """
move to next change
"""
key = "' d"
do = "workbench.action.editor.nextChange"

[[bind.edit.navigation.items]]
name = "change ←"
description = """
move to previous change
"""
key = "' shift+d"
do = "workbench.action.editor.previousChange"

[bind.window]
name = "Window Manipulation"
description = "Commands for navigating and manipulating the window/editor panes in some way"
kind = "window"
default.mode = "normal"

[[bind.window.items]]
name = "center"
description = "center window at primary cursor position"
key = ", >"
do.command = "selection-utilities.revealActive"
do.args = "center"

[[bind.window.items]]
name = "top"
description = "center window so that primary cursor is at the top"
key = ", shift+k"
do.command = "selection-utilities.revealActive"
do.args = "top"

[[bind.window.items]]
name = "bottom"
description = "center window so that primary cursor is at the bottom"
key = ", shift+j"
do.command = "selection-utilities.revealActive"
do.args = "bottom"

[[bind.window.items]]
name = "max"
description = "minimize size of all other windows"
key = ", shift+m"
do = "workbench.action.minimizeOtherEditors"

[[bind.window.items]]
name = "equal"
description = "equalzize size of all windows"
key = ", ="
do = "workbench.action.evenEditorWidths"

[[bind.window.items]]
name = "split"
description = "toggle split editor view"
key = ", |"
do = "workbench.action.toggleSplitEditorInGroup"

[[bind.window.items]]
name = "split →"
description = "move to other side of editor split"
key = ", shift+l"
do = "workbench.action.focusOtherSideEditor"

[[bind.window.items]]
name = "→"
description = "move focus to window to the right"
key = ", l"
do = "workbench.action.focusRightGroup"

[[bind.window.items]]
name = "←"
description = "move focus to window to the left"
key = ", h"
do = "workbench.action.focusLeftGroup"

[[bind.window.items]]
name = "↑"
description = "move focus to window above"
key = ", k"
do = "workbench.action.focusAboveGroup"

[[bind.window.items]]
name = "↓"
description = "move focus to window below"
key = ", j"
do = "workbench.action.focusBelowGroup"

[[bind.window.items]]
name = "hover"
description = "show the hover view"
key = "g h"
do = "editor.action.showHover"

[[bind.window.items]]
name = "open"
description = "open the file name under the cursor"
key = "g f"
do = "extension.openFileFromPath"

[[bind.window.items]]
name = "go to"
description = "go to the definition of symbol under curosr"
key = "g d"
do = "editor.action.revealDefinition"

[[bind.window.items]]
name = "go to (aside)"
description = "go to the definition of symbol under curosr in an editor to the side"
key = "g shift+d"
do = "editor.action.revealDefinitionAside"

[[bind.window.bookmark.items]]
name = "mark"
description = "toggle bookmark at given line (use 'j, 'k and '# to navigate bookmarks)"
key = "g "
do = "vsc-labeled-bookmarks.toggleBookmark"

[[bind.window.bookmark.items]]
name = "mark ↓"
description = "move to next bookmark"
key = "' j"
when = "!master-key.select_on && !editorHasSelection"
do = "vsc-labeled-bookmarks.navigateToNextBookmark"

[[bind.window.bookmark.items]]
key = "' j"
when = "master-key.select_on || editorHasSelection"
do = "vsc-labeled-bookmarks.expandSelectionToNextBookmark"

[[bind.window.bookmark.items]]
name = "mark ↑"
description = "move to previous bookmark"
key = "' k"
when = "!master-key.select_on && !editorHasSelection"
do = "vsc-labeled-bookmarks.navigateToPreviousBookmark"

[[bind.window.bookmark.items]]
name = "mark ↑"
description = "move to previous bookmark"
key = "' k"
when = "master-key.select_on || editorHasSelection"
do = ["vsc-labeled-bookmarks.expandSelectionToPreviousBookmark", 
      "selection-utilities.activeAtStart"]

[[bind.window.bookmark.items]]
name = "mark"
description = "remove bookmark (use quick selection)"
key = "g x space"
do = "vsc-labeled-bookmarks.deleteBookmark"

[[bind.window.bookmark.items]]
name = "nav marks"
description = "reveal quick selection to move to a bookmark"
key = "' shift+3"
do = "vsc-labeled-bookmarks.navigateToBookmark"

[[bind.window.create.items]]
name = "create"
description = "create new window of editor in given direction" 
key = ", c"
kind = "prefix"
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "c"

[[bind.window.create.items]]
name = "→"
description = "create new window of editor to left" 
key = ", c l"
do = "workbench.action.splitEditorRight"

[[bind.window.create.items]]
name = "←"
description = "create new window of editor to left" 
key = ", c h"
do = "workbench.action.splitEditorLeft"

[[bind.window.create.items]]
name = "↓"
description = "create new window of editor below" 
key = ", c j"
do = "workbench.action.splitEditorDown"

[[bind.window.create.items]]
name = "↑"
description = "create new window of editor above" 
key = ", c k"
do = "workbench.action.splitEditorUp"

[[bind.window.move.items]]
name = "move to"
description = "move editor to window in given direction" 
key = ", m"
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "c"

[[bind.window.move.items]]
name = "→"
description = "move editor to window to left" 
key = ", m l"
do = "workbench.action.moveEditorToRightGroup"

[[bind.window.move.items]]
name = "←"
description = "move editor to window to left" 
key = ", m h"
do = "workbench.action.moveEditorToLeftGroup"

[[bind.window.move.items]]
name = "↓"
description = "move editor to window below" 
key = ", m j"
do = "workbench.action.moveEditorToBelowGroup"

[[bind.window.move.items]]
name = "↑"
description = "move editor to window above" 
key = ", m k"
do = "workbench.action.moveEditorToAboveGroup"

[[bind.window.move.items]]
name = "close pane"
description = "close the given group of editors"
key = ", x"
do = "workbench.action.closeEditorsInGroup"

[bind.edit.select_edit]
name = "Selection Editing"
description = "Various kakaune inspired commands for editing multiple selections"
default.mode = "selectedit"

[[bind.edit.select_edit.items]]
name = "select-edit"
detail = """
Enter a mode where you can edit and manipulate (possibly multiple) selections with ease. 
Entering the mode also adds a new cursor for the next match to the word under the curosr 
(or selection). You can use the count to ask multiple matches to be added. 
(You can use `,\"` to avoid adding any cursors).
"""
key = "shift+'"
when = "editorHasMultipleSelections"
do.command = "master-key.enterMode"
do.args = "selectedit"
mode = "normal"

[[bind.edit.select_edit.items]]
key = "shift+'"
when = "!editorHasMultipleSelections"
do = [
      {command = "master-key.enterMode", args = "selectedit"},
      { command = "selection-utilities.addNext", computedArgs = { repeat = 'count' } }
]
mode = "normal"

[[bind.edit.select_edit.items]]
name = "select-edit"
description = """
Enter a mode where you can edit and manipulate (possibly multiple) selections with ease. 
No additional cursors will be added when entering the mode with this command. 
"""
key = ", shift+'"
do.command = "master-key.enterMode"
do.args = "selectedit"
mode = "normal"

[[bind.edit.select_edit.items]]
name = 'normal'
description = "return to a single selection and return to normal mode"
key = "enter"
do = ["selection-utilities.cancelSelection", "modalkeys.enterNormal"]

[[bind.edit.select_edit.items]]
name = 'insert'
description = "insert mode at cursor"
key = "selectedit::i"
do = ["modalkeys.enterNormal", "selection-utilities.shrinkToActive", "modalkeys.enterInsert"]

[[bind.edit.select_edit.items]]
name = "add →"
description = "add cursor at the next match to the primary cursor's text" 
key = ["shift+'", "shift+j"]
do = { command = "selection-utilities.addNext", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
name = "add ←"
description = "add cursor at the previous match to the primary cursor's text" 
key = "shift+k"
do = { command = "selection-utilities.addPrev", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
name = "skip →"
description = "move primary cursor to the next match of the primary cursor's text" 
key = "g j"
do =  { command = "selection-utilities.skipNext", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
name = "skip →"
description = "move primary cursor to the previous match of the primary cursor's text" 
key = "g k"
do = { command = "selection-utilities.skipPrev", computedArgs = { repeat = 'count' } }


[[bind.edit.select_edit.items]]
name = "align ←"
description = "align selections left"
key = "="
do = "selection-utilities.alignSelectionsLeft"

[[bind.edit.select_edit.items]]
name = "align →"
description = "align selections right"
key = "shift+="
do = "selection-utilities.alignSelectionsRight"

[[bind.edit.select_edit.items]]
name = "save sel"
description = """
save all selections to the default register. 
Use a count to specify an alternate register
"""
key = "' c"
mode = "normal"
do = [
      { command = "selection-utilities.appendToMemory", computedArgs = { register = "'selmemory_'+count" } },
      "modalkeys.cancelMultipleSelections", "modalkeys.enterNormal"
]

[[bind.edit.select_edit.items]]
name = "load sel"
description = """
load previously saved selections in the default register. 
Use a count to specify an alternate register
"""
key = "' v"
mode = ["normal", "normal"]
do = [
      { command = "selection-utilities.restoreAndClear", computedArgs = { register = "count" } },
]

[[bind.edit.select_edit.items]]
when = "editorHasMultipleSelections"
key = "' v"
mode = ["normal", "normal"]
do = [
      { command = "selection-utilities.restoreAndClear", computedArgs = { register = "count" } },
      { command = "enterMode", args = "selectedit" }
]

[[bind.edit.select_edit.items]]
name = "exchange sel"
description = """
exchange selections: with no saved selection, saves the selection, with saved selections exchanges text of current selections with those of the saved selections (number of selections must match). Use a count to specify an alternate register.
"""
key = "' x"
mode = ["normal", "normal"]
      do = { command = "selection-utilities.swapWithMemory", computedArgs = { register = "count" } }

[[bind.edit.select_edit.items]]
name = "rem saved sel"
description = """
remove the most recently saved selection from the list of saved selections
"""
key = "' n"
mode = ["normal", "normal"]
do = { command = "selection-utilities.deleteLastSaved", computedArgs = { register = "count" } }

[[bind.edit.select_edit.items]]
key = "' enter"
name = "split sel"
description = """
split selection into multiple selections by new line charactesr
"""
mode = ["normal", "selectedit"]
do = [
      { defined = "selectLinesDown" },
      "selection-utilities.splitByNewline",
      { command = "master-key.enterMode", args = { mode = "selectedit" } }
]

[[bind.edit.select_edit.items]]
name = "sel all"
description = """
create a selection for every match of the current word (or selection)
"""
key = "' shift+8"
mode = ["normal", "selectedit"]
do = [
      "editor.action.selectHighlights",
      { command = "master-key.enterMode", args = { mode = "selectedit" } }
]

[[bind.edit.select_edit.items]]
name = "restore sel"
description = """
restore the most recently cleared selection
"""
key = ", -"
mode = ["normal", "selectedit"]
do = { command = "selection-utilities.restoreAndClear", args = { register = "cancel"} }

[[bind.edit.select_edit.items]]
when = "editorHasMultipleSelections"
key = ", -"
mode = ["normal", "selectedit"]
do = [
      { command = "selection-utilities.restoreAndClear", args = { register = "cancel"} },
      { command = "master-key.enterMode", args = { mode = "selectedit" } }
]

[[bind.edit.select_edit.items]]
name = "insert sel ↑"
description = """
insert cursor on line above
"""
key = "' shift+k"
mode = ["normal", "selectedit"]
do = [
      { command = "editor.action.insertCursorAbove", computedArgs = { repeat = 'count' } },
      { command = "modalkeys.enterMode", args = { mode = "selectedit" } },
]

[[bind.edit.select_edit.items]]
name = "insert sel ↓"
description = """
insert cursor on line below
"""
key = "' shift+j"
mode = ["normal", "selectedit"]
do = [
      { command = "editor.action.insertCursorBelow", computedArgs = { repeat = 'count' } },
      { command = "modalkeys.enterMode", args = { mode = "selectedit" }},
]

[[bind.edit.select_edit.items]]
name = "reset"
description = "collapse all selections to the active position, and return to normal mode" 
key = "r"
do = [ "modalkeys.enterNormal", "selection-utilities.shrinkToActive" ]

[[bind.edit.select_edit.items]]
name = "→ sel"
description = "make the next selection primary; primary selections determine from where you add cursors, what cursor you delete, and where the cursor goes when you clear or save selections" 
key = "j"
do = { command = "selection-utilities.movePrimaryRight", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
name = "← sel"
description = "make the previous selection primary; primary selections determine from where you add cursors, what cursor you delete, and where the cursor goes when you clear or save selections" 
key = "k"
do = { command = "selection-utilities.movePrimaryLeft", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
name = "del. sel"
description = "remove the primary selection" 
key = "d"
do = { command = "selection-utilities.deletePrimary", computedArgs = { repeat = 'count' } }

[[bind.edit.select_edit.items]]
key = "s"
name = "split"
description = "split the selection by a specified marker"
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "s" # TODO: this shouldn't be necessary (and could be confusing)

[[bind.edit.select_edit.split.items]]
name = "newline"
description = "split by newlines"
key = "s enter"
do = "selection-utilities.splitByNewline"

[[bind.edit.select_edit.split.items]]
name = "string"
description = "split by a given string"
key = "s s"
do = "selection-utilities.splitBy"

[[bind.edit.select_edit.split.items]]
name = "regex"
description = "split by a given regular expression"
key = "s r"
do = "selection-utilities.splitByRegex"


[[bind.edit.select_edit.split.items]]
name = "character"
description = "split by a given character"
key = "s c"
do.command = "modalkeys.captureChar"
do.args.acceptAfter = 1
do.args.doAfter = { command = "selection-utilities.splitBy", computedArgs = { text = "capture" } }

[[bind.edit.select_edit.create.items]]
name = "create"
description = """
create a set of selections by the specified marker that all fall within the current 
set of selections
"""
key = "/"
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "/"

[[bind.edit.select_edit.create.items]]
name = "string"
description = "create selections of given string scoped to the current selections"
key = "/ s"
do = "selection-utilities.createBy"

[[bind.edit.select_edit.create.items]]
name = "regex"
description = "create selections of given regular expression scoped to the current selections"
key = "/ r"
do = "selection-utilities.createByRegex"

[[bind.edit.select_edit.create.items]]
name = "character"
description = "create selections of given character scoped to the current selections"
key = "/ c"
do.command = "modalkeys.captureChar"
do.args.acceptAfter = 1
do.args.executeAfter = { command = "selection-utilities.createBy", args = { text = "capture" } }

[[bind.edit.select_edit.create.items]]
name = "include by"
description = """
Include all selections that contain a given marker
"""
key = "["
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "["

[[bind.edit.select_edit.create.items]]
name = "exclude by"
description = """
Exclude all selections that contain a given marker
"""
key = "]"
resetTransient = false
do.command = "master-key.prefix"
do.args.key = "]"

[[bind.edit.select_edit.split.items]]
name = "string"
description = "Include all selections that contain a given string"
key = "[ s"
do = "selection-utilities.includeBy"

[[bind.edit.select_edit.split.items]]
name = "string"
description = "Exclude all selections that contain a given string"
key = "] s"
do = "selection-utilities.excludeBy"

[[bind.edit.select_edit.split.items]]
name = "regex"
description = "Include all selections that contain a given regular expression"
key = "[ r"
do = "selection-utilities.includeByRegex"

[[bind.edit.select_edit.split.items]]
name = "regex"
description = "Exclude all selections that contain a given regular expression"
key = "] r"
do = "selection-utilities.excludeByRegex"

[bind.edit.action.symmetric]
name = "Symmetric Operations"
description = "Operations that occur at both ends of a selection"
default.kind = "select"
default.mode = "syminsert"

[[bind.edit.action.symmetric.items]]
name = "Symmetric Insert Mode"
description = """
In this mode all commands and character insertions happen at both ends of 
the selection
"""
mode = "normal"
key = "g '"
do.command = "master-key.enterMode"
do.args.mode = "syminsert"

[[bind.edit.action.symmetric.items]]
name = "Normal"
description = "Return to normal model"
key = ["enter", "g '"]
do.command = "master-key.enterMode"
do.args.mode = "normal"

[define.symmetric_key_map]
"shift+;" = ":"
"shift+'" = "\""
"shift+/" = "?"
"shift+\\" = "|"
"shift+=" = "+"
"shift+-" = "-"
"shift+8" = "*"
"shift+7" = "&"
"shift+6" = "^"
"shift+5" = "%"
"shift+4" = "$"
"shift+3" = "#"
"shift+2" = "@"
"shift+1" = "!"
"shift+`" = "~"
";" = ";"
"'" = "'"
"," = ","
"." = "."
"/" = "/"
"=" = "="
"-" = "-"
"`" = "`"

[[bind.edit.action.symmetric.items]]
key = [
      "shift+;",
      ";",
      "'",
      "shift+'",
      ",",
      ".",
      "/",
      "shift+/",
      "shift+\\",
      "=",
      "shift+=",
      "-",
      "shift+-",
      "shift+8",
      "shift+7",
      "shift+6",
      "shift+5",
      "shift+4",
      "shift+3",
      "shift+2",
      "shift+1",
      "shift+`",
      "`",
]
description = "Insert the character {symmetric_key_map[key]} at both ends of each selection"
do.command = "selection-utilities.insertAround"
do.args = { before = "{symmetric_key_map[key]}", after = "{symmetric_key_map[key]}" }
