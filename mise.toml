[tools]
node = "20"
"npm:typescript" = "5.8.3"
"npm:vsce" = "2.15"
"npm:c8" = "latest"
"npm:http-server" = "14.1.1"
"npm:pnpm" = "10.13.1"
"ubi:haberdashpi/simple-src-docs" = "0.6.0"
watchexec = "2.3.2"
rust = { version = "1.88", targets = "wasm32-unknown-unknown", component = "lvm-tools" }
"cargo:wasm-pack" = "0.13.1"
"cargo:cargo-binutils" = "0.3.6"
"cargo:rustfilt" = "latest"
"cargo:nu" = "latest"

[hooks]
postinstall = [
    'pnpm install --frozen-lockfile',
    'pnpm exec playwright install chromium',
    'rustup toolchain install nightly',
]

[tasks.lint]
run = 'pnpm exec eslint src'

[tasks.check-types]
run = 'tsc --noEmit --project tsconfig.json'

# TODO: maybe consider using colons and figure out mise task hierarchies???
[tasks.build-rust]
sources = ['src/rust/parsing/src/**/*.rs', 'src/rust/parsing/Cargo.toml']
outputs = ['out/**/*.wasm', 'src/rust/parsing/lib/*']
dir = 'src/rust/parsing'
run = [
    'wasm-pack build --target web --out-dir lib',
    'mkdir -p ../../../out',
    'cp lib/parsing_bg.wasm ../../../out/parsing_bg.wasm',
]

[vars]
coverage_options = '''--ignore-filename-regex '/.cargo/registry' --ignore-filename-regex '.rustup/toolchains' --ignore-filename-regex 'rustc/' --compilation-dir src/rust/parsing --instr-profile coverage/parsing.profdata --Xdemangler rustfilt'''

# TODO: generate an lcov report I can merge with the other coverage output
[tasks.test-rust]
dir = 'src/rust/parsing'
shell = 'nu -c'
run = '''
def main [...args] {
    if ($env.COVERAGE? | default false | into bool) {
        $env.RUSTFLAGS = '-C instrument-coverage'
        $env.LLVM_PROFILE_FILE = 'coverage/parsing.profraw'

        let object_files = cargo +nightly test --tests --no-run --message-format=json |
            from json -o | where profile?.test |
            get filenames.0 |
            each { |f| $'--object=($in)' }

        cargo +nightly test --tests ...$args -- --nocapture
        cargo profdata -- merge -sparse coverage/parsing.profraw -o coverage/parsing.profdata
        (cargo cov -- export {{vars.coverage_options}} --format=lcov ...($object_files) o>
            ../../../coverage/rs_coverage.info)

        cargo cov -- report --use-color {{vars.coverage_options}} ...($object_files)
    } else {
        cargo test ...$args -- --nocapture
    }
}
main
'''

[tasks.build]
depends = ['check-types', 'lint', 'build-rust']
sources = ['src/**/*.ts']
run = 'node esbuild.mjs'

[tasks.package]
depends = ['check-types', 'lint', 'build-rust']
sources = ['src/**/*.ts']
run = [
    'node esbuild.mjs --release',
    'node esbuild.mjs --web --release',
    'vsce package --no-dependencies',
]

[tasks.build-tests]
depends = ['check-types', 'lint', 'build']
sources = ['src/test/**/*.ts']
outputs = ['out/test/**/*.js']
run = 'tsc -p src/test --outDir out/test'

[tasks.test]
depends = ['build-tests']
shell = 'nu -c'
run = '''
if ($env.COVERAGE? | default false | into bool) {
    (pnpm exec vscode-test --config .vscode-test.mjs --extensionDevelopmentPath .
        --version insiders --coverage --coverage-output coverage/unit
        --coverage-reporter json)
} else {
    (pnpm exec vscode-test --config .vscode-test.mjs --extensionDevelopmentPath .
        --version insiders)
}
'''

[tasks.test-web]
depends = ['build --web']
run = '''
pnpm exec vscode-test-web --extensionDevelopmentPath=. --extensionTestsPath=./out/browser/webExtensionTests.js
'''

[tasks.run-web]
depends = ['build --web']
run = 'pnpm exec vscode-test-web --extensionDevelopmentPath=.'

[tasks.assemble-coverage]
shell = 'nu -c'
run = '''
c8 --temp-directory coverage/integration/tmp/ report -r json -o coverage/integration/',
(pnpm exec istanbul-merge --out coverage/merged/coverage-final.json
    coverage/integration/coverage-final.json coverage/unit/coverage-final.json)
(pnpm exec nyc report -t coverage/merged --report-dir coverage -r lcov
    --exclude node_modules --exclude out --exclude .vscode-test
    --exclude src/test)
mv coverage/lcov.info coverage/ts_coverage.info'

cat coverage/*_coverage.info o> coverage/lcov.info
lcov-summary coverage/lcov.info
'''

[tasks.test-integration]
depends = ['build', 'build-tests']
run = 'pnpm exec playwright test'

[tasks.extract-docs]
sources = ['README.md', 'src/extension/**/*.ts', 'docs/templates/**/*.md']
outputs = { auto = true }
run = 'simple-src-docs -d docs src README.md docs/templates'

[tasks.build-docs]
sources = [
    'docs/index.md',
    'docs/guide.md',
    'docs/bindings/**/*.md',
    'docs/commands/**/*.md',
]
outputs = ['docs/.vitepress/dist/**/*']
depends = ['extract-docs']
run = 'pnpm exec vitepress build docs'

[tasks.report-coverage]
depends = ['test --coverage', 'test-integration']
run = ['c8 report -r html', 'http-server coverage']
